# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated
from whmcs_client.models.add_client_response import AddClientResponse
from whmcs_client.models.add_order_response import AddOrderResponse
from whmcs_client.models.update_client_response import UpdateClientResponse

from whmcs_client.api_client import ApiClient, RequestSerialized
from whmcs_client.api_response import ApiResponse
from whmcs_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_client(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        firstname: Annotated[StrictStr, Field(description="First name of the client")],
        lastname: Annotated[StrictStr, Field(description="Last name of the client")],
        email: Annotated[StrictStr, Field(description="Email address of the client")],
        address1: Annotated[StrictStr, Field(description="Address line 1")],
        city: Annotated[StrictStr, Field(description="City")],
        state: Annotated[StrictStr, Field(description="State")],
        postcode: Annotated[StrictStr, Field(description="Postal code")],
        country: Annotated[StrictStr, Field(description="2 character ISO country code")],
        phonenumber: Annotated[StrictStr, Field(description="Phone number")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        owner_user_id: Annotated[Optional[StrictInt], Field(description="The ID of the user that should own the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        marketingoptin: Annotated[Optional[StrictBool], Field(description="Opt-in to marketing emails")] = None,
        noemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Order Confirmation email being sent")] = None,
        skipvalidation: Annotated[Optional[StrictBool], Field(description="Ignore required field validation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddClientResponse:
        """Add a new client

        Creates a new client account in WHMCS

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param firstname: First name of the client (required)
        :type firstname: str
        :param lastname: Last name of the client (required)
        :type lastname: str
        :param email: Email address of the client (required)
        :type email: str
        :param address1: Address line 1 (required)
        :type address1: str
        :param city: City (required)
        :type city: str
        :param state: State (required)
        :type state: str
        :param postcode: Postal code (required)
        :type postcode: str
        :param country: 2 character ISO country code (required)
        :type country: str
        :param phonenumber: Phone number (required)
        :type phonenumber: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param owner_user_id: The ID of the user that should own the client
        :type owner_user_id: int
        :param companyname: Company name
        :type companyname: str
        :param address2: Address line 2
        :type address2: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param marketingoptin: Opt-in to marketing emails
        :type marketingoptin: bool
        :param noemail: Set to true to suppress the Order Confirmation email being sent
        :type noemail: bool
        :param skipvalidation: Ignore required field validation
        :type skipvalidation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_client_serialize(
            username=username,
            password=password,
            firstname=firstname,
            lastname=lastname,
            email=email,
            address1=address1,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            accesskey=accesskey,
            responsetype=responsetype,
            owner_user_id=owner_user_id,
            companyname=companyname,
            address2=address2,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            marketingoptin=marketingoptin,
            noemail=noemail,
            skipvalidation=skipvalidation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_client_with_http_info(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        firstname: Annotated[StrictStr, Field(description="First name of the client")],
        lastname: Annotated[StrictStr, Field(description="Last name of the client")],
        email: Annotated[StrictStr, Field(description="Email address of the client")],
        address1: Annotated[StrictStr, Field(description="Address line 1")],
        city: Annotated[StrictStr, Field(description="City")],
        state: Annotated[StrictStr, Field(description="State")],
        postcode: Annotated[StrictStr, Field(description="Postal code")],
        country: Annotated[StrictStr, Field(description="2 character ISO country code")],
        phonenumber: Annotated[StrictStr, Field(description="Phone number")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        owner_user_id: Annotated[Optional[StrictInt], Field(description="The ID of the user that should own the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        marketingoptin: Annotated[Optional[StrictBool], Field(description="Opt-in to marketing emails")] = None,
        noemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Order Confirmation email being sent")] = None,
        skipvalidation: Annotated[Optional[StrictBool], Field(description="Ignore required field validation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddClientResponse]:
        """Add a new client

        Creates a new client account in WHMCS

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param firstname: First name of the client (required)
        :type firstname: str
        :param lastname: Last name of the client (required)
        :type lastname: str
        :param email: Email address of the client (required)
        :type email: str
        :param address1: Address line 1 (required)
        :type address1: str
        :param city: City (required)
        :type city: str
        :param state: State (required)
        :type state: str
        :param postcode: Postal code (required)
        :type postcode: str
        :param country: 2 character ISO country code (required)
        :type country: str
        :param phonenumber: Phone number (required)
        :type phonenumber: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param owner_user_id: The ID of the user that should own the client
        :type owner_user_id: int
        :param companyname: Company name
        :type companyname: str
        :param address2: Address line 2
        :type address2: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param marketingoptin: Opt-in to marketing emails
        :type marketingoptin: bool
        :param noemail: Set to true to suppress the Order Confirmation email being sent
        :type noemail: bool
        :param skipvalidation: Ignore required field validation
        :type skipvalidation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_client_serialize(
            username=username,
            password=password,
            firstname=firstname,
            lastname=lastname,
            email=email,
            address1=address1,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            accesskey=accesskey,
            responsetype=responsetype,
            owner_user_id=owner_user_id,
            companyname=companyname,
            address2=address2,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            marketingoptin=marketingoptin,
            noemail=noemail,
            skipvalidation=skipvalidation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_client_without_preload_content(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        firstname: Annotated[StrictStr, Field(description="First name of the client")],
        lastname: Annotated[StrictStr, Field(description="Last name of the client")],
        email: Annotated[StrictStr, Field(description="Email address of the client")],
        address1: Annotated[StrictStr, Field(description="Address line 1")],
        city: Annotated[StrictStr, Field(description="City")],
        state: Annotated[StrictStr, Field(description="State")],
        postcode: Annotated[StrictStr, Field(description="Postal code")],
        country: Annotated[StrictStr, Field(description="2 character ISO country code")],
        phonenumber: Annotated[StrictStr, Field(description="Phone number")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        owner_user_id: Annotated[Optional[StrictInt], Field(description="The ID of the user that should own the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        marketingoptin: Annotated[Optional[StrictBool], Field(description="Opt-in to marketing emails")] = None,
        noemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Order Confirmation email being sent")] = None,
        skipvalidation: Annotated[Optional[StrictBool], Field(description="Ignore required field validation")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add a new client

        Creates a new client account in WHMCS

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param firstname: First name of the client (required)
        :type firstname: str
        :param lastname: Last name of the client (required)
        :type lastname: str
        :param email: Email address of the client (required)
        :type email: str
        :param address1: Address line 1 (required)
        :type address1: str
        :param city: City (required)
        :type city: str
        :param state: State (required)
        :type state: str
        :param postcode: Postal code (required)
        :type postcode: str
        :param country: 2 character ISO country code (required)
        :type country: str
        :param phonenumber: Phone number (required)
        :type phonenumber: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param owner_user_id: The ID of the user that should own the client
        :type owner_user_id: int
        :param companyname: Company name
        :type companyname: str
        :param address2: Address line 2
        :type address2: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param marketingoptin: Opt-in to marketing emails
        :type marketingoptin: bool
        :param noemail: Set to true to suppress the Order Confirmation email being sent
        :type noemail: bool
        :param skipvalidation: Ignore required field validation
        :type skipvalidation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_client_serialize(
            username=username,
            password=password,
            firstname=firstname,
            lastname=lastname,
            email=email,
            address1=address1,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            accesskey=accesskey,
            responsetype=responsetype,
            owner_user_id=owner_user_id,
            companyname=companyname,
            address2=address2,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            marketingoptin=marketingoptin,
            noemail=noemail,
            skipvalidation=skipvalidation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_client_serialize(
        self,
        username,
        password,
        firstname,
        lastname,
        email,
        address1,
        city,
        state,
        postcode,
        country,
        phonenumber,
        accesskey,
        responsetype,
        owner_user_id,
        companyname,
        address2,
        tax_id,
        password2,
        securityqid,
        securityqans,
        currency,
        groupid,
        customfields,
        language,
        clientip,
        notes,
        marketingoptin,
        noemail,
        skipvalidation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if username is not None:
            _form_params.append(('username', username))
        if password is not None:
            _form_params.append(('password', password))
        if accesskey is not None:
            _form_params.append(('accesskey', accesskey))
        if responsetype is not None:
            _form_params.append(('responsetype', responsetype))
        if owner_user_id is not None:
            _form_params.append(('owner_user_id', owner_user_id))
        if firstname is not None:
            _form_params.append(('firstname', firstname))
        if lastname is not None:
            _form_params.append(('lastname', lastname))
        if companyname is not None:
            _form_params.append(('companyname', companyname))
        if email is not None:
            _form_params.append(('email', email))
        if address1 is not None:
            _form_params.append(('address1', address1))
        if address2 is not None:
            _form_params.append(('address2', address2))
        if city is not None:
            _form_params.append(('city', city))
        if state is not None:
            _form_params.append(('state', state))
        if postcode is not None:
            _form_params.append(('postcode', postcode))
        if country is not None:
            _form_params.append(('country', country))
        if phonenumber is not None:
            _form_params.append(('phonenumber', phonenumber))
        if tax_id is not None:
            _form_params.append(('tax_id', tax_id))
        if password2 is not None:
            _form_params.append(('password2', password2))
        if securityqid is not None:
            _form_params.append(('securityqid', securityqid))
        if securityqans is not None:
            _form_params.append(('securityqans', securityqans))
        if currency is not None:
            _form_params.append(('currency', currency))
        if groupid is not None:
            _form_params.append(('groupid', groupid))
        if customfields is not None:
            _form_params.append(('customfields', customfields))
        if language is not None:
            _form_params.append(('language', language))
        if clientip is not None:
            _form_params.append(('clientip', clientip))
        if notes is not None:
            _form_params.append(('notes', notes))
        if marketingoptin is not None:
            _form_params.append(('marketingoptin', marketingoptin))
        if noemail is not None:
            _form_params.append(('noemail', noemail))
        if skipvalidation is not None:
            _form_params.append(('skipvalidation', skipvalidation))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api.php?action=AddClient',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_order(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to add the order for")],
        paymentmethod: Annotated[StrictStr, Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        pid: Annotated[Optional[List[StrictInt]], Field(description="Array of product IDs to add to the order")] = None,
        qty: Annotated[Optional[List[StrictInt]], Field(description="Array of product quantities")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Array of domain names associated with the products/domains")] = None,
        billingcycle: Annotated[Optional[List[StrictStr]], Field(description="Array of billing cycles for the products")] = None,
        domaintype: Annotated[Optional[List[StrictStr]], Field(description="For domain registrations, array of register or transfer values")] = None,
        regperiod: Annotated[Optional[List[Annotated[int, Field(le=10, strict=True, ge=1)]]], Field(description="For domain registrations, the registration periods for the domains")] = None,
        idnlanguage: Annotated[Optional[List[StrictStr]], Field(description="For IDN domain registrations, the language codes for the domains")] = None,
        eppcode: Annotated[Optional[List[StrictStr]], Field(description="For domain transfers, the EPP codes for the domains being transferred")] = None,
        nameserver1: Annotated[Optional[StrictStr], Field(description="The first nameserver to apply to all domains in the order")] = None,
        nameserver2: Annotated[Optional[StrictStr], Field(description="The second nameserver to apply to all domains in the order")] = None,
        nameserver3: Annotated[Optional[StrictStr], Field(description="The third nameserver to apply to all domains in the order")] = None,
        nameserver4: Annotated[Optional[StrictStr], Field(description="The fourth nameserver to apply to all domains in the order")] = None,
        nameserver5: Annotated[Optional[StrictStr], Field(description="The fifth nameserver to apply to all domains in the order")] = None,
        configoptions: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of product configurable options values")] = None,
        priceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the product being ordered")] = None,
        promocode: Annotated[Optional[StrictStr], Field(description="The promotion code to apply to the order")] = None,
        promooverride: Annotated[Optional[StrictBool], Field(description="Should the promotion apply to the order even without matching promotional products")] = None,
        affid: Annotated[Optional[StrictInt], Field(description="The affiliate ID to associate with the order")] = None,
        noinvoice: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the invoice generating for the whole order")] = None,
        noinvoiceemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Invoice Created email being sent for the order")] = None,
        addons: Annotated[Optional[List[StrictStr]], Field(description="Array of comma separated lists of addons to create on order with the products")] = None,
        addonsqty: Annotated[Optional[List[StrictStr]], Field(description="Array of comma-separated lists of quantities for addons associated with products")] = None,
        hostname: Annotated[Optional[List[StrictStr]], Field(description="Array of hostnames for VPS/Dedicated Server orders")] = None,
        ns1prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)")] = None,
        ns2prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)")] = None,
        rootpw: Annotated[Optional[List[StrictStr]], Field(description="Array of desired root passwords for VPS/Dedicated servers")] = None,
        contactid: Annotated[Optional[StrictInt], Field(description="The ID of the contact, associated with the client, that should apply to all domains in the order")] = None,
        dnsmanagement: Annotated[Optional[List[StrictBool]], Field(description="Add DNS Management to the Domain Order")] = None,
        domainfields: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of TLD Specific Field Values")] = None,
        emailforwarding: Annotated[Optional[List[StrictBool]], Field(description="Add Email Forwarding to the Domain Order")] = None,
        idprotection: Annotated[Optional[List[StrictBool]], Field(description="Add ID Protection to the Domain Order")] = None,
        domainpriceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the registration price on the domain being ordered")] = None,
        domainrenewoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the renewal price on the domain being ordered")] = None,
        domainrenewals: Annotated[Optional[Dict[str, StrictInt]], Field(description="A name -> value object of domainName -> renewalPeriod renewals to add an order for")] = None,
        addonid: Annotated[Optional[StrictInt], Field(description="The Addon ID for an Addon Only Order")] = None,
        addonidqty: Annotated[Optional[StrictInt], Field(description="The quantity of addons in an addon-only order")] = None,
        serviceid: Annotated[Optional[StrictInt], Field(description="The service ID for the addon only order")] = None,
        addonids: Annotated[Optional[List[StrictInt]], Field(description="Array of addon IDs for an Addon Only Order")] = None,
        addonidsqty: Annotated[Optional[List[StrictInt]], Field(description="Array of quantities for an addon-only order")] = None,
        serviceids: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to associate the addons for an Addon Only order")] = None,
        servicerenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to be on-demand renewed")] = None,
        addonrenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service addon IDs to be on-demand renewed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AddOrderResponse:
        """Create a new order

        Places a new order for products/services

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to add the order for (required)
        :type clientid: int
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin) (required)
        :type paymentmethod: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param pid: Array of product IDs to add to the order
        :type pid: List[int]
        :param qty: Array of product quantities
        :type qty: List[int]
        :param domain: Array of domain names associated with the products/domains
        :type domain: List[str]
        :param billingcycle: Array of billing cycles for the products
        :type billingcycle: List[str]
        :param domaintype: For domain registrations, array of register or transfer values
        :type domaintype: List[str]
        :param regperiod: For domain registrations, the registration periods for the domains
        :type regperiod: List[int]
        :param idnlanguage: For IDN domain registrations, the language codes for the domains
        :type idnlanguage: List[str]
        :param eppcode: For domain transfers, the EPP codes for the domains being transferred
        :type eppcode: List[str]
        :param nameserver1: The first nameserver to apply to all domains in the order
        :type nameserver1: str
        :param nameserver2: The second nameserver to apply to all domains in the order
        :type nameserver2: str
        :param nameserver3: The third nameserver to apply to all domains in the order
        :type nameserver3: str
        :param nameserver4: The fourth nameserver to apply to all domains in the order
        :type nameserver4: str
        :param nameserver5: The fifth nameserver to apply to all domains in the order
        :type nameserver5: str
        :param configoptions: Array of base64 encoded serialized array of product configurable options values
        :type configoptions: List[str]
        :param priceoverride: Override the price of the product being ordered
        :type priceoverride: List[float]
        :param promocode: The promotion code to apply to the order
        :type promocode: str
        :param promooverride: Should the promotion apply to the order even without matching promotional products
        :type promooverride: bool
        :param affid: The affiliate ID to associate with the order
        :type affid: int
        :param noinvoice: Set to true to suppress the invoice generating for the whole order
        :type noinvoice: bool
        :param noinvoiceemail: Set to true to suppress the Invoice Created email being sent for the order
        :type noinvoiceemail: bool
        :param addons: Array of comma separated lists of addons to create on order with the products
        :type addons: List[str]
        :param addonsqty: Array of comma-separated lists of quantities for addons associated with products
        :type addonsqty: List[str]
        :param hostname: Array of hostnames for VPS/Dedicated Server orders
        :type hostname: List[str]
        :param ns1prefix: Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)
        :type ns1prefix: List[str]
        :param ns2prefix: Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)
        :type ns2prefix: List[str]
        :param rootpw: Array of desired root passwords for VPS/Dedicated servers
        :type rootpw: List[str]
        :param contactid: The ID of the contact, associated with the client, that should apply to all domains in the order
        :type contactid: int
        :param dnsmanagement: Add DNS Management to the Domain Order
        :type dnsmanagement: List[bool]
        :param domainfields: Array of base64 encoded serialized array of TLD Specific Field Values
        :type domainfields: List[str]
        :param emailforwarding: Add Email Forwarding to the Domain Order
        :type emailforwarding: List[bool]
        :param idprotection: Add ID Protection to the Domain Order
        :type idprotection: List[bool]
        :param domainpriceoverride: Override the price of the registration price on the domain being ordered
        :type domainpriceoverride: List[float]
        :param domainrenewoverride: Override the price of the renewal price on the domain being ordered
        :type domainrenewoverride: List[float]
        :param domainrenewals: A name -> value object of domainName -> renewalPeriod renewals to add an order for
        :type domainrenewals: Dict[str, int]
        :param addonid: The Addon ID for an Addon Only Order
        :type addonid: int
        :param addonidqty: The quantity of addons in an addon-only order
        :type addonidqty: int
        :param serviceid: The service ID for the addon only order
        :type serviceid: int
        :param addonids: Array of addon IDs for an Addon Only Order
        :type addonids: List[int]
        :param addonidsqty: Array of quantities for an addon-only order
        :type addonidsqty: List[int]
        :param serviceids: Array of service IDs to associate the addons for an Addon Only order
        :type serviceids: List[int]
        :param servicerenewals: Array of service IDs to be on-demand renewed
        :type servicerenewals: List[int]
        :param addonrenewals: Array of service addon IDs to be on-demand renewed
        :type addonrenewals: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_order_serialize(
            username=username,
            password=password,
            clientid=clientid,
            paymentmethod=paymentmethod,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            pid=pid,
            qty=qty,
            domain=domain,
            billingcycle=billingcycle,
            domaintype=domaintype,
            regperiod=regperiod,
            idnlanguage=idnlanguage,
            eppcode=eppcode,
            nameserver1=nameserver1,
            nameserver2=nameserver2,
            nameserver3=nameserver3,
            nameserver4=nameserver4,
            nameserver5=nameserver5,
            configoptions=configoptions,
            priceoverride=priceoverride,
            promocode=promocode,
            promooverride=promooverride,
            affid=affid,
            noinvoice=noinvoice,
            noinvoiceemail=noinvoiceemail,
            addons=addons,
            addonsqty=addonsqty,
            hostname=hostname,
            ns1prefix=ns1prefix,
            ns2prefix=ns2prefix,
            rootpw=rootpw,
            contactid=contactid,
            dnsmanagement=dnsmanagement,
            domainfields=domainfields,
            emailforwarding=emailforwarding,
            idprotection=idprotection,
            domainpriceoverride=domainpriceoverride,
            domainrenewoverride=domainrenewoverride,
            domainrenewals=domainrenewals,
            addonid=addonid,
            addonidqty=addonidqty,
            serviceid=serviceid,
            addonids=addonids,
            addonidsqty=addonidsqty,
            serviceids=serviceids,
            servicerenewals=servicerenewals,
            addonrenewals=addonrenewals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_order_with_http_info(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to add the order for")],
        paymentmethod: Annotated[StrictStr, Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        pid: Annotated[Optional[List[StrictInt]], Field(description="Array of product IDs to add to the order")] = None,
        qty: Annotated[Optional[List[StrictInt]], Field(description="Array of product quantities")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Array of domain names associated with the products/domains")] = None,
        billingcycle: Annotated[Optional[List[StrictStr]], Field(description="Array of billing cycles for the products")] = None,
        domaintype: Annotated[Optional[List[StrictStr]], Field(description="For domain registrations, array of register or transfer values")] = None,
        regperiod: Annotated[Optional[List[Annotated[int, Field(le=10, strict=True, ge=1)]]], Field(description="For domain registrations, the registration periods for the domains")] = None,
        idnlanguage: Annotated[Optional[List[StrictStr]], Field(description="For IDN domain registrations, the language codes for the domains")] = None,
        eppcode: Annotated[Optional[List[StrictStr]], Field(description="For domain transfers, the EPP codes for the domains being transferred")] = None,
        nameserver1: Annotated[Optional[StrictStr], Field(description="The first nameserver to apply to all domains in the order")] = None,
        nameserver2: Annotated[Optional[StrictStr], Field(description="The second nameserver to apply to all domains in the order")] = None,
        nameserver3: Annotated[Optional[StrictStr], Field(description="The third nameserver to apply to all domains in the order")] = None,
        nameserver4: Annotated[Optional[StrictStr], Field(description="The fourth nameserver to apply to all domains in the order")] = None,
        nameserver5: Annotated[Optional[StrictStr], Field(description="The fifth nameserver to apply to all domains in the order")] = None,
        configoptions: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of product configurable options values")] = None,
        priceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the product being ordered")] = None,
        promocode: Annotated[Optional[StrictStr], Field(description="The promotion code to apply to the order")] = None,
        promooverride: Annotated[Optional[StrictBool], Field(description="Should the promotion apply to the order even without matching promotional products")] = None,
        affid: Annotated[Optional[StrictInt], Field(description="The affiliate ID to associate with the order")] = None,
        noinvoice: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the invoice generating for the whole order")] = None,
        noinvoiceemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Invoice Created email being sent for the order")] = None,
        addons: Annotated[Optional[List[StrictStr]], Field(description="Array of comma separated lists of addons to create on order with the products")] = None,
        addonsqty: Annotated[Optional[List[StrictStr]], Field(description="Array of comma-separated lists of quantities for addons associated with products")] = None,
        hostname: Annotated[Optional[List[StrictStr]], Field(description="Array of hostnames for VPS/Dedicated Server orders")] = None,
        ns1prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)")] = None,
        ns2prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)")] = None,
        rootpw: Annotated[Optional[List[StrictStr]], Field(description="Array of desired root passwords for VPS/Dedicated servers")] = None,
        contactid: Annotated[Optional[StrictInt], Field(description="The ID of the contact, associated with the client, that should apply to all domains in the order")] = None,
        dnsmanagement: Annotated[Optional[List[StrictBool]], Field(description="Add DNS Management to the Domain Order")] = None,
        domainfields: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of TLD Specific Field Values")] = None,
        emailforwarding: Annotated[Optional[List[StrictBool]], Field(description="Add Email Forwarding to the Domain Order")] = None,
        idprotection: Annotated[Optional[List[StrictBool]], Field(description="Add ID Protection to the Domain Order")] = None,
        domainpriceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the registration price on the domain being ordered")] = None,
        domainrenewoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the renewal price on the domain being ordered")] = None,
        domainrenewals: Annotated[Optional[Dict[str, StrictInt]], Field(description="A name -> value object of domainName -> renewalPeriod renewals to add an order for")] = None,
        addonid: Annotated[Optional[StrictInt], Field(description="The Addon ID for an Addon Only Order")] = None,
        addonidqty: Annotated[Optional[StrictInt], Field(description="The quantity of addons in an addon-only order")] = None,
        serviceid: Annotated[Optional[StrictInt], Field(description="The service ID for the addon only order")] = None,
        addonids: Annotated[Optional[List[StrictInt]], Field(description="Array of addon IDs for an Addon Only Order")] = None,
        addonidsqty: Annotated[Optional[List[StrictInt]], Field(description="Array of quantities for an addon-only order")] = None,
        serviceids: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to associate the addons for an Addon Only order")] = None,
        servicerenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to be on-demand renewed")] = None,
        addonrenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service addon IDs to be on-demand renewed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AddOrderResponse]:
        """Create a new order

        Places a new order for products/services

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to add the order for (required)
        :type clientid: int
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin) (required)
        :type paymentmethod: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param pid: Array of product IDs to add to the order
        :type pid: List[int]
        :param qty: Array of product quantities
        :type qty: List[int]
        :param domain: Array of domain names associated with the products/domains
        :type domain: List[str]
        :param billingcycle: Array of billing cycles for the products
        :type billingcycle: List[str]
        :param domaintype: For domain registrations, array of register or transfer values
        :type domaintype: List[str]
        :param regperiod: For domain registrations, the registration periods for the domains
        :type regperiod: List[int]
        :param idnlanguage: For IDN domain registrations, the language codes for the domains
        :type idnlanguage: List[str]
        :param eppcode: For domain transfers, the EPP codes for the domains being transferred
        :type eppcode: List[str]
        :param nameserver1: The first nameserver to apply to all domains in the order
        :type nameserver1: str
        :param nameserver2: The second nameserver to apply to all domains in the order
        :type nameserver2: str
        :param nameserver3: The third nameserver to apply to all domains in the order
        :type nameserver3: str
        :param nameserver4: The fourth nameserver to apply to all domains in the order
        :type nameserver4: str
        :param nameserver5: The fifth nameserver to apply to all domains in the order
        :type nameserver5: str
        :param configoptions: Array of base64 encoded serialized array of product configurable options values
        :type configoptions: List[str]
        :param priceoverride: Override the price of the product being ordered
        :type priceoverride: List[float]
        :param promocode: The promotion code to apply to the order
        :type promocode: str
        :param promooverride: Should the promotion apply to the order even without matching promotional products
        :type promooverride: bool
        :param affid: The affiliate ID to associate with the order
        :type affid: int
        :param noinvoice: Set to true to suppress the invoice generating for the whole order
        :type noinvoice: bool
        :param noinvoiceemail: Set to true to suppress the Invoice Created email being sent for the order
        :type noinvoiceemail: bool
        :param addons: Array of comma separated lists of addons to create on order with the products
        :type addons: List[str]
        :param addonsqty: Array of comma-separated lists of quantities for addons associated with products
        :type addonsqty: List[str]
        :param hostname: Array of hostnames for VPS/Dedicated Server orders
        :type hostname: List[str]
        :param ns1prefix: Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)
        :type ns1prefix: List[str]
        :param ns2prefix: Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)
        :type ns2prefix: List[str]
        :param rootpw: Array of desired root passwords for VPS/Dedicated servers
        :type rootpw: List[str]
        :param contactid: The ID of the contact, associated with the client, that should apply to all domains in the order
        :type contactid: int
        :param dnsmanagement: Add DNS Management to the Domain Order
        :type dnsmanagement: List[bool]
        :param domainfields: Array of base64 encoded serialized array of TLD Specific Field Values
        :type domainfields: List[str]
        :param emailforwarding: Add Email Forwarding to the Domain Order
        :type emailforwarding: List[bool]
        :param idprotection: Add ID Protection to the Domain Order
        :type idprotection: List[bool]
        :param domainpriceoverride: Override the price of the registration price on the domain being ordered
        :type domainpriceoverride: List[float]
        :param domainrenewoverride: Override the price of the renewal price on the domain being ordered
        :type domainrenewoverride: List[float]
        :param domainrenewals: A name -> value object of domainName -> renewalPeriod renewals to add an order for
        :type domainrenewals: Dict[str, int]
        :param addonid: The Addon ID for an Addon Only Order
        :type addonid: int
        :param addonidqty: The quantity of addons in an addon-only order
        :type addonidqty: int
        :param serviceid: The service ID for the addon only order
        :type serviceid: int
        :param addonids: Array of addon IDs for an Addon Only Order
        :type addonids: List[int]
        :param addonidsqty: Array of quantities for an addon-only order
        :type addonidsqty: List[int]
        :param serviceids: Array of service IDs to associate the addons for an Addon Only order
        :type serviceids: List[int]
        :param servicerenewals: Array of service IDs to be on-demand renewed
        :type servicerenewals: List[int]
        :param addonrenewals: Array of service addon IDs to be on-demand renewed
        :type addonrenewals: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_order_serialize(
            username=username,
            password=password,
            clientid=clientid,
            paymentmethod=paymentmethod,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            pid=pid,
            qty=qty,
            domain=domain,
            billingcycle=billingcycle,
            domaintype=domaintype,
            regperiod=regperiod,
            idnlanguage=idnlanguage,
            eppcode=eppcode,
            nameserver1=nameserver1,
            nameserver2=nameserver2,
            nameserver3=nameserver3,
            nameserver4=nameserver4,
            nameserver5=nameserver5,
            configoptions=configoptions,
            priceoverride=priceoverride,
            promocode=promocode,
            promooverride=promooverride,
            affid=affid,
            noinvoice=noinvoice,
            noinvoiceemail=noinvoiceemail,
            addons=addons,
            addonsqty=addonsqty,
            hostname=hostname,
            ns1prefix=ns1prefix,
            ns2prefix=ns2prefix,
            rootpw=rootpw,
            contactid=contactid,
            dnsmanagement=dnsmanagement,
            domainfields=domainfields,
            emailforwarding=emailforwarding,
            idprotection=idprotection,
            domainpriceoverride=domainpriceoverride,
            domainrenewoverride=domainrenewoverride,
            domainrenewals=domainrenewals,
            addonid=addonid,
            addonidqty=addonidqty,
            serviceid=serviceid,
            addonids=addonids,
            addonidsqty=addonidsqty,
            serviceids=serviceids,
            servicerenewals=servicerenewals,
            addonrenewals=addonrenewals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_order_without_preload_content(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to add the order for")],
        paymentmethod: Annotated[StrictStr, Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        pid: Annotated[Optional[List[StrictInt]], Field(description="Array of product IDs to add to the order")] = None,
        qty: Annotated[Optional[List[StrictInt]], Field(description="Array of product quantities")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Array of domain names associated with the products/domains")] = None,
        billingcycle: Annotated[Optional[List[StrictStr]], Field(description="Array of billing cycles for the products")] = None,
        domaintype: Annotated[Optional[List[StrictStr]], Field(description="For domain registrations, array of register or transfer values")] = None,
        regperiod: Annotated[Optional[List[Annotated[int, Field(le=10, strict=True, ge=1)]]], Field(description="For domain registrations, the registration periods for the domains")] = None,
        idnlanguage: Annotated[Optional[List[StrictStr]], Field(description="For IDN domain registrations, the language codes for the domains")] = None,
        eppcode: Annotated[Optional[List[StrictStr]], Field(description="For domain transfers, the EPP codes for the domains being transferred")] = None,
        nameserver1: Annotated[Optional[StrictStr], Field(description="The first nameserver to apply to all domains in the order")] = None,
        nameserver2: Annotated[Optional[StrictStr], Field(description="The second nameserver to apply to all domains in the order")] = None,
        nameserver3: Annotated[Optional[StrictStr], Field(description="The third nameserver to apply to all domains in the order")] = None,
        nameserver4: Annotated[Optional[StrictStr], Field(description="The fourth nameserver to apply to all domains in the order")] = None,
        nameserver5: Annotated[Optional[StrictStr], Field(description="The fifth nameserver to apply to all domains in the order")] = None,
        configoptions: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of product configurable options values")] = None,
        priceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the product being ordered")] = None,
        promocode: Annotated[Optional[StrictStr], Field(description="The promotion code to apply to the order")] = None,
        promooverride: Annotated[Optional[StrictBool], Field(description="Should the promotion apply to the order even without matching promotional products")] = None,
        affid: Annotated[Optional[StrictInt], Field(description="The affiliate ID to associate with the order")] = None,
        noinvoice: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the invoice generating for the whole order")] = None,
        noinvoiceemail: Annotated[Optional[StrictBool], Field(description="Set to true to suppress the Invoice Created email being sent for the order")] = None,
        addons: Annotated[Optional[List[StrictStr]], Field(description="Array of comma separated lists of addons to create on order with the products")] = None,
        addonsqty: Annotated[Optional[List[StrictStr]], Field(description="Array of comma-separated lists of quantities for addons associated with products")] = None,
        hostname: Annotated[Optional[List[StrictStr]], Field(description="Array of hostnames for VPS/Dedicated Server orders")] = None,
        ns1prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)")] = None,
        ns2prefix: Annotated[Optional[List[StrictStr]], Field(description="Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)")] = None,
        rootpw: Annotated[Optional[List[StrictStr]], Field(description="Array of desired root passwords for VPS/Dedicated servers")] = None,
        contactid: Annotated[Optional[StrictInt], Field(description="The ID of the contact, associated with the client, that should apply to all domains in the order")] = None,
        dnsmanagement: Annotated[Optional[List[StrictBool]], Field(description="Add DNS Management to the Domain Order")] = None,
        domainfields: Annotated[Optional[List[StrictStr]], Field(description="Array of base64 encoded serialized array of TLD Specific Field Values")] = None,
        emailforwarding: Annotated[Optional[List[StrictBool]], Field(description="Add Email Forwarding to the Domain Order")] = None,
        idprotection: Annotated[Optional[List[StrictBool]], Field(description="Add ID Protection to the Domain Order")] = None,
        domainpriceoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the registration price on the domain being ordered")] = None,
        domainrenewoverride: Annotated[Optional[List[Union[StrictFloat, StrictInt]]], Field(description="Override the price of the renewal price on the domain being ordered")] = None,
        domainrenewals: Annotated[Optional[Dict[str, StrictInt]], Field(description="A name -> value object of domainName -> renewalPeriod renewals to add an order for")] = None,
        addonid: Annotated[Optional[StrictInt], Field(description="The Addon ID for an Addon Only Order")] = None,
        addonidqty: Annotated[Optional[StrictInt], Field(description="The quantity of addons in an addon-only order")] = None,
        serviceid: Annotated[Optional[StrictInt], Field(description="The service ID for the addon only order")] = None,
        addonids: Annotated[Optional[List[StrictInt]], Field(description="Array of addon IDs for an Addon Only Order")] = None,
        addonidsqty: Annotated[Optional[List[StrictInt]], Field(description="Array of quantities for an addon-only order")] = None,
        serviceids: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to associate the addons for an Addon Only order")] = None,
        servicerenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service IDs to be on-demand renewed")] = None,
        addonrenewals: Annotated[Optional[List[StrictInt]], Field(description="Array of service addon IDs to be on-demand renewed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new order

        Places a new order for products/services

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to add the order for (required)
        :type clientid: int
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin) (required)
        :type paymentmethod: str
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param pid: Array of product IDs to add to the order
        :type pid: List[int]
        :param qty: Array of product quantities
        :type qty: List[int]
        :param domain: Array of domain names associated with the products/domains
        :type domain: List[str]
        :param billingcycle: Array of billing cycles for the products
        :type billingcycle: List[str]
        :param domaintype: For domain registrations, array of register or transfer values
        :type domaintype: List[str]
        :param regperiod: For domain registrations, the registration periods for the domains
        :type regperiod: List[int]
        :param idnlanguage: For IDN domain registrations, the language codes for the domains
        :type idnlanguage: List[str]
        :param eppcode: For domain transfers, the EPP codes for the domains being transferred
        :type eppcode: List[str]
        :param nameserver1: The first nameserver to apply to all domains in the order
        :type nameserver1: str
        :param nameserver2: The second nameserver to apply to all domains in the order
        :type nameserver2: str
        :param nameserver3: The third nameserver to apply to all domains in the order
        :type nameserver3: str
        :param nameserver4: The fourth nameserver to apply to all domains in the order
        :type nameserver4: str
        :param nameserver5: The fifth nameserver to apply to all domains in the order
        :type nameserver5: str
        :param configoptions: Array of base64 encoded serialized array of product configurable options values
        :type configoptions: List[str]
        :param priceoverride: Override the price of the product being ordered
        :type priceoverride: List[float]
        :param promocode: The promotion code to apply to the order
        :type promocode: str
        :param promooverride: Should the promotion apply to the order even without matching promotional products
        :type promooverride: bool
        :param affid: The affiliate ID to associate with the order
        :type affid: int
        :param noinvoice: Set to true to suppress the invoice generating for the whole order
        :type noinvoice: bool
        :param noinvoiceemail: Set to true to suppress the Invoice Created email being sent for the order
        :type noinvoiceemail: bool
        :param addons: Array of comma separated lists of addons to create on order with the products
        :type addons: List[str]
        :param addonsqty: Array of comma-separated lists of quantities for addons associated with products
        :type addonsqty: List[str]
        :param hostname: Array of hostnames for VPS/Dedicated Server orders
        :type hostname: List[str]
        :param ns1prefix: Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)
        :type ns1prefix: List[str]
        :param ns2prefix: Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)
        :type ns2prefix: List[str]
        :param rootpw: Array of desired root passwords for VPS/Dedicated servers
        :type rootpw: List[str]
        :param contactid: The ID of the contact, associated with the client, that should apply to all domains in the order
        :type contactid: int
        :param dnsmanagement: Add DNS Management to the Domain Order
        :type dnsmanagement: List[bool]
        :param domainfields: Array of base64 encoded serialized array of TLD Specific Field Values
        :type domainfields: List[str]
        :param emailforwarding: Add Email Forwarding to the Domain Order
        :type emailforwarding: List[bool]
        :param idprotection: Add ID Protection to the Domain Order
        :type idprotection: List[bool]
        :param domainpriceoverride: Override the price of the registration price on the domain being ordered
        :type domainpriceoverride: List[float]
        :param domainrenewoverride: Override the price of the renewal price on the domain being ordered
        :type domainrenewoverride: List[float]
        :param domainrenewals: A name -> value object of domainName -> renewalPeriod renewals to add an order for
        :type domainrenewals: Dict[str, int]
        :param addonid: The Addon ID for an Addon Only Order
        :type addonid: int
        :param addonidqty: The quantity of addons in an addon-only order
        :type addonidqty: int
        :param serviceid: The service ID for the addon only order
        :type serviceid: int
        :param addonids: Array of addon IDs for an Addon Only Order
        :type addonids: List[int]
        :param addonidsqty: Array of quantities for an addon-only order
        :type addonidsqty: List[int]
        :param serviceids: Array of service IDs to associate the addons for an Addon Only order
        :type serviceids: List[int]
        :param servicerenewals: Array of service IDs to be on-demand renewed
        :type servicerenewals: List[int]
        :param addonrenewals: Array of service addon IDs to be on-demand renewed
        :type addonrenewals: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_order_serialize(
            username=username,
            password=password,
            clientid=clientid,
            paymentmethod=paymentmethod,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            pid=pid,
            qty=qty,
            domain=domain,
            billingcycle=billingcycle,
            domaintype=domaintype,
            regperiod=regperiod,
            idnlanguage=idnlanguage,
            eppcode=eppcode,
            nameserver1=nameserver1,
            nameserver2=nameserver2,
            nameserver3=nameserver3,
            nameserver4=nameserver4,
            nameserver5=nameserver5,
            configoptions=configoptions,
            priceoverride=priceoverride,
            promocode=promocode,
            promooverride=promooverride,
            affid=affid,
            noinvoice=noinvoice,
            noinvoiceemail=noinvoiceemail,
            addons=addons,
            addonsqty=addonsqty,
            hostname=hostname,
            ns1prefix=ns1prefix,
            ns2prefix=ns2prefix,
            rootpw=rootpw,
            contactid=contactid,
            dnsmanagement=dnsmanagement,
            domainfields=domainfields,
            emailforwarding=emailforwarding,
            idprotection=idprotection,
            domainpriceoverride=domainpriceoverride,
            domainrenewoverride=domainrenewoverride,
            domainrenewals=domainrenewals,
            addonid=addonid,
            addonidqty=addonidqty,
            serviceid=serviceid,
            addonids=addonids,
            addonidsqty=addonidsqty,
            serviceids=serviceids,
            servicerenewals=servicerenewals,
            addonrenewals=addonrenewals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AddOrderResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_order_serialize(
        self,
        username,
        password,
        clientid,
        paymentmethod,
        accesskey,
        responsetype,
        clientemail,
        pid,
        qty,
        domain,
        billingcycle,
        domaintype,
        regperiod,
        idnlanguage,
        eppcode,
        nameserver1,
        nameserver2,
        nameserver3,
        nameserver4,
        nameserver5,
        configoptions,
        priceoverride,
        promocode,
        promooverride,
        affid,
        noinvoice,
        noinvoiceemail,
        addons,
        addonsqty,
        hostname,
        ns1prefix,
        ns2prefix,
        rootpw,
        contactid,
        dnsmanagement,
        domainfields,
        emailforwarding,
        idprotection,
        domainpriceoverride,
        domainrenewoverride,
        domainrenewals,
        addonid,
        addonidqty,
        serviceid,
        addonids,
        addonidsqty,
        serviceids,
        servicerenewals,
        addonrenewals,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'pid': 'csv',
            'qty': 'csv',
            'domain': 'csv',
            'billingcycle': 'csv',
            'domaintype': 'csv',
            'regperiod': 'csv',
            'idnlanguage': 'csv',
            'eppcode': 'csv',
            'configoptions': 'csv',
            'priceoverride': 'csv',
            'addons': 'csv',
            'addonsqty': 'csv',
            'hostname': 'csv',
            'ns1prefix': 'csv',
            'ns2prefix': 'csv',
            'rootpw': 'csv',
            'dnsmanagement': 'csv',
            'domainfields': 'csv',
            'emailforwarding': 'csv',
            'idprotection': 'csv',
            'domainpriceoverride': 'csv',
            'domainrenewoverride': 'csv',
            'addonids': 'csv',
            'addonidsqty': 'csv',
            'serviceids': 'csv',
            'servicerenewals': 'csv',
            'addonrenewals': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if username is not None:
            _form_params.append(('username', username))
        if password is not None:
            _form_params.append(('password', password))
        if accesskey is not None:
            _form_params.append(('accesskey', accesskey))
        if responsetype is not None:
            _form_params.append(('responsetype', responsetype))
        if clientid is not None:
            _form_params.append(('clientid', clientid))
        if clientemail is not None:
            _form_params.append(('clientemail', clientemail))
        if paymentmethod is not None:
            _form_params.append(('paymentmethod', paymentmethod))
        if pid is not None:
            _form_params.append(('pid', pid))
        if qty is not None:
            _form_params.append(('qty', qty))
        if domain is not None:
            _form_params.append(('domain', domain))
        if billingcycle is not None:
            _form_params.append(('billingcycle', billingcycle))
        if domaintype is not None:
            _form_params.append(('domaintype', domaintype))
        if regperiod is not None:
            _form_params.append(('regperiod', regperiod))
        if idnlanguage is not None:
            _form_params.append(('idnlanguage', idnlanguage))
        if eppcode is not None:
            _form_params.append(('eppcode', eppcode))
        if nameserver1 is not None:
            _form_params.append(('nameserver1', nameserver1))
        if nameserver2 is not None:
            _form_params.append(('nameserver2', nameserver2))
        if nameserver3 is not None:
            _form_params.append(('nameserver3', nameserver3))
        if nameserver4 is not None:
            _form_params.append(('nameserver4', nameserver4))
        if nameserver5 is not None:
            _form_params.append(('nameserver5', nameserver5))
        if configoptions is not None:
            _form_params.append(('configoptions', configoptions))
        if priceoverride is not None:
            _form_params.append(('priceoverride', priceoverride))
        if promocode is not None:
            _form_params.append(('promocode', promocode))
        if promooverride is not None:
            _form_params.append(('promooverride', promooverride))
        if affid is not None:
            _form_params.append(('affid', affid))
        if noinvoice is not None:
            _form_params.append(('noinvoice', noinvoice))
        if noinvoiceemail is not None:
            _form_params.append(('noinvoiceemail', noinvoiceemail))
        if addons is not None:
            _form_params.append(('addons', addons))
        if addonsqty is not None:
            _form_params.append(('addonsqty', addonsqty))
        if hostname is not None:
            _form_params.append(('hostname', hostname))
        if ns1prefix is not None:
            _form_params.append(('ns1prefix', ns1prefix))
        if ns2prefix is not None:
            _form_params.append(('ns2prefix', ns2prefix))
        if rootpw is not None:
            _form_params.append(('rootpw', rootpw))
        if contactid is not None:
            _form_params.append(('contactid', contactid))
        if dnsmanagement is not None:
            _form_params.append(('dnsmanagement', dnsmanagement))
        if domainfields is not None:
            _form_params.append(('domainfields', domainfields))
        if emailforwarding is not None:
            _form_params.append(('emailforwarding', emailforwarding))
        if idprotection is not None:
            _form_params.append(('idprotection', idprotection))
        if domainpriceoverride is not None:
            _form_params.append(('domainpriceoverride', domainpriceoverride))
        if domainrenewoverride is not None:
            _form_params.append(('domainrenewoverride', domainrenewoverride))
        if domainrenewals is not None:
            _form_params.append(('domainrenewals', domainrenewals))
        if addonid is not None:
            _form_params.append(('addonid', addonid))
        if addonidqty is not None:
            _form_params.append(('addonidqty', addonidqty))
        if serviceid is not None:
            _form_params.append(('serviceid', serviceid))
        if addonids is not None:
            _form_params.append(('addonids', addonids))
        if addonidsqty is not None:
            _form_params.append(('addonidsqty', addonidsqty))
        if serviceids is not None:
            _form_params.append(('serviceids', serviceids))
        if servicerenewals is not None:
            _form_params.append(('servicerenewals', servicerenewals))
        if addonrenewals is not None:
            _form_params.append(('addonrenewals', addonrenewals))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api.php?action=AddOrder',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_client(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to update")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        firstname: Annotated[Optional[StrictStr], Field(description="First name of the client")] = None,
        lastname: Annotated[Optional[StrictStr], Field(description="Last name of the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address of the client")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="Postal code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="2 character ISO country code")] = None,
        phonenumber: Annotated[Optional[StrictStr], Field(description="Phone number")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status (e.g., Active)")] = None,
        paymentmethod: Annotated[Optional[StrictStr], Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")] = None,
        email_preferences_general: Annotated[Optional[StrictBool], Field(description="Receive general emails")] = None,
        email_preferences_product: Annotated[Optional[StrictBool], Field(description="Receive product emails")] = None,
        email_preferences_domain: Annotated[Optional[StrictBool], Field(description="Receive domain emails")] = None,
        email_preferences_invoice: Annotated[Optional[StrictBool], Field(description="Receive invoice emails")] = None,
        email_preferences_support: Annotated[Optional[StrictBool], Field(description="Receive support emails")] = None,
        email_preferences_affiliate: Annotated[Optional[StrictBool], Field(description="Receive affiliate emails")] = None,
        clearcreditcard: Annotated[Optional[StrictBool], Field(description="Clear stored credit card details")] = None,
        latefeeoveride: Annotated[Optional[StrictBool], Field(description="Override Late Fees setting")] = None,
        overideduenotices: Annotated[Optional[StrictBool], Field(description="Override Overdue Notices setting")] = None,
        taxexempt: Annotated[Optional[StrictBool], Field(description="Exempt from tax collections")] = None,
        separateinvoices: Annotated[Optional[StrictBool], Field(description="Group items into one invoice")] = None,
        disableautocc: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic credit card processing")] = None,
        overrideautoclose: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic account closure")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateClientResponse:
        """Update client details

        Modifies an existing client's information

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to update (required)
        :type clientid: int
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param firstname: First name of the client
        :type firstname: str
        :param lastname: Last name of the client
        :type lastname: str
        :param companyname: Company name
        :type companyname: str
        :param email: Email address of the client
        :type email: str
        :param address1: Address line 1
        :type address1: str
        :param address2: Address line 2
        :type address2: str
        :param city: City
        :type city: str
        :param state: State
        :type state: str
        :param postcode: Postal code
        :type postcode: str
        :param country: 2 character ISO country code
        :type country: str
        :param phonenumber: Phone number
        :type phonenumber: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param status: The status (e.g., Active)
        :type status: str
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin)
        :type paymentmethod: str
        :param email_preferences_general: Receive general emails
        :type email_preferences_general: bool
        :param email_preferences_product: Receive product emails
        :type email_preferences_product: bool
        :param email_preferences_domain: Receive domain emails
        :type email_preferences_domain: bool
        :param email_preferences_invoice: Receive invoice emails
        :type email_preferences_invoice: bool
        :param email_preferences_support: Receive support emails
        :type email_preferences_support: bool
        :param email_preferences_affiliate: Receive affiliate emails
        :type email_preferences_affiliate: bool
        :param clearcreditcard: Clear stored credit card details
        :type clearcreditcard: bool
        :param latefeeoveride: Override Late Fees setting
        :type latefeeoveride: bool
        :param overideduenotices: Override Overdue Notices setting
        :type overideduenotices: bool
        :param taxexempt: Exempt from tax collections
        :type taxexempt: bool
        :param separateinvoices: Group items into one invoice
        :type separateinvoices: bool
        :param disableautocc: Enable/disable automatic credit card processing
        :type disableautocc: bool
        :param overrideautoclose: Enable/disable automatic account closure
        :type overrideautoclose: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_client_serialize(
            username=username,
            password=password,
            clientid=clientid,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            firstname=firstname,
            lastname=lastname,
            companyname=companyname,
            email=email,
            address1=address1,
            address2=address2,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            status=status,
            paymentmethod=paymentmethod,
            email_preferences_general=email_preferences_general,
            email_preferences_product=email_preferences_product,
            email_preferences_domain=email_preferences_domain,
            email_preferences_invoice=email_preferences_invoice,
            email_preferences_support=email_preferences_support,
            email_preferences_affiliate=email_preferences_affiliate,
            clearcreditcard=clearcreditcard,
            latefeeoveride=latefeeoveride,
            overideduenotices=overideduenotices,
            taxexempt=taxexempt,
            separateinvoices=separateinvoices,
            disableautocc=disableautocc,
            overrideautoclose=overrideautoclose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_client_with_http_info(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to update")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        firstname: Annotated[Optional[StrictStr], Field(description="First name of the client")] = None,
        lastname: Annotated[Optional[StrictStr], Field(description="Last name of the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address of the client")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="Postal code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="2 character ISO country code")] = None,
        phonenumber: Annotated[Optional[StrictStr], Field(description="Phone number")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status (e.g., Active)")] = None,
        paymentmethod: Annotated[Optional[StrictStr], Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")] = None,
        email_preferences_general: Annotated[Optional[StrictBool], Field(description="Receive general emails")] = None,
        email_preferences_product: Annotated[Optional[StrictBool], Field(description="Receive product emails")] = None,
        email_preferences_domain: Annotated[Optional[StrictBool], Field(description="Receive domain emails")] = None,
        email_preferences_invoice: Annotated[Optional[StrictBool], Field(description="Receive invoice emails")] = None,
        email_preferences_support: Annotated[Optional[StrictBool], Field(description="Receive support emails")] = None,
        email_preferences_affiliate: Annotated[Optional[StrictBool], Field(description="Receive affiliate emails")] = None,
        clearcreditcard: Annotated[Optional[StrictBool], Field(description="Clear stored credit card details")] = None,
        latefeeoveride: Annotated[Optional[StrictBool], Field(description="Override Late Fees setting")] = None,
        overideduenotices: Annotated[Optional[StrictBool], Field(description="Override Overdue Notices setting")] = None,
        taxexempt: Annotated[Optional[StrictBool], Field(description="Exempt from tax collections")] = None,
        separateinvoices: Annotated[Optional[StrictBool], Field(description="Group items into one invoice")] = None,
        disableautocc: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic credit card processing")] = None,
        overrideautoclose: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic account closure")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateClientResponse]:
        """Update client details

        Modifies an existing client's information

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to update (required)
        :type clientid: int
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param firstname: First name of the client
        :type firstname: str
        :param lastname: Last name of the client
        :type lastname: str
        :param companyname: Company name
        :type companyname: str
        :param email: Email address of the client
        :type email: str
        :param address1: Address line 1
        :type address1: str
        :param address2: Address line 2
        :type address2: str
        :param city: City
        :type city: str
        :param state: State
        :type state: str
        :param postcode: Postal code
        :type postcode: str
        :param country: 2 character ISO country code
        :type country: str
        :param phonenumber: Phone number
        :type phonenumber: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param status: The status (e.g., Active)
        :type status: str
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin)
        :type paymentmethod: str
        :param email_preferences_general: Receive general emails
        :type email_preferences_general: bool
        :param email_preferences_product: Receive product emails
        :type email_preferences_product: bool
        :param email_preferences_domain: Receive domain emails
        :type email_preferences_domain: bool
        :param email_preferences_invoice: Receive invoice emails
        :type email_preferences_invoice: bool
        :param email_preferences_support: Receive support emails
        :type email_preferences_support: bool
        :param email_preferences_affiliate: Receive affiliate emails
        :type email_preferences_affiliate: bool
        :param clearcreditcard: Clear stored credit card details
        :type clearcreditcard: bool
        :param latefeeoveride: Override Late Fees setting
        :type latefeeoveride: bool
        :param overideduenotices: Override Overdue Notices setting
        :type overideduenotices: bool
        :param taxexempt: Exempt from tax collections
        :type taxexempt: bool
        :param separateinvoices: Group items into one invoice
        :type separateinvoices: bool
        :param disableautocc: Enable/disable automatic credit card processing
        :type disableautocc: bool
        :param overrideautoclose: Enable/disable automatic account closure
        :type overrideautoclose: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_client_serialize(
            username=username,
            password=password,
            clientid=clientid,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            firstname=firstname,
            lastname=lastname,
            companyname=companyname,
            email=email,
            address1=address1,
            address2=address2,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            status=status,
            paymentmethod=paymentmethod,
            email_preferences_general=email_preferences_general,
            email_preferences_product=email_preferences_product,
            email_preferences_domain=email_preferences_domain,
            email_preferences_invoice=email_preferences_invoice,
            email_preferences_support=email_preferences_support,
            email_preferences_affiliate=email_preferences_affiliate,
            clearcreditcard=clearcreditcard,
            latefeeoveride=latefeeoveride,
            overideduenotices=overideduenotices,
            taxexempt=taxexempt,
            separateinvoices=separateinvoices,
            disableautocc=disableautocc,
            overrideautoclose=overrideautoclose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_client_without_preload_content(
        self,
        username: Annotated[StrictStr, Field(description="Admin username/API identifier")],
        password: Annotated[StrictStr, Field(description="Admin password/API secret")],
        clientid: Annotated[StrictInt, Field(description="The ID of the client to update")],
        accesskey: Annotated[Optional[StrictStr], Field(description="Optional API access key")] = None,
        responsetype: Annotated[Optional[StrictStr], Field(description="Response format")] = None,
        clientemail: Annotated[Optional[StrictStr], Field(description="The email address of the client to update")] = None,
        firstname: Annotated[Optional[StrictStr], Field(description="First name of the client")] = None,
        lastname: Annotated[Optional[StrictStr], Field(description="Last name of the client")] = None,
        companyname: Annotated[Optional[StrictStr], Field(description="Company name")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address of the client")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State")] = None,
        postcode: Annotated[Optional[StrictStr], Field(description="Postal code")] = None,
        country: Annotated[Optional[StrictStr], Field(description="2 character ISO country code")] = None,
        phonenumber: Annotated[Optional[StrictStr], Field(description="Phone number")] = None,
        tax_id: Annotated[Optional[StrictStr], Field(description="Client's tax ID")] = None,
        password2: Annotated[Optional[StrictStr], Field(description="Password for the new user account")] = None,
        securityqid: Annotated[Optional[StrictInt], Field(description="Security question ID")] = None,
        securityqans: Annotated[Optional[StrictStr], Field(description="Security question answer")] = None,
        currency: Annotated[Optional[StrictInt], Field(description="Currency ID")] = None,
        groupid: Annotated[Optional[StrictInt], Field(description="Client group ID")] = None,
        customfields: Annotated[Optional[StrictStr], Field(description="Base64 encoded serialized array of custom field values")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Default language setting")] = None,
        clientip: Annotated[Optional[StrictStr], Field(description="Originating IP address")] = None,
        notes: Annotated[Optional[StrictStr], Field(description="Admin only notes")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status (e.g., Active)")] = None,
        paymentmethod: Annotated[Optional[StrictStr], Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")] = None,
        email_preferences_general: Annotated[Optional[StrictBool], Field(description="Receive general emails")] = None,
        email_preferences_product: Annotated[Optional[StrictBool], Field(description="Receive product emails")] = None,
        email_preferences_domain: Annotated[Optional[StrictBool], Field(description="Receive domain emails")] = None,
        email_preferences_invoice: Annotated[Optional[StrictBool], Field(description="Receive invoice emails")] = None,
        email_preferences_support: Annotated[Optional[StrictBool], Field(description="Receive support emails")] = None,
        email_preferences_affiliate: Annotated[Optional[StrictBool], Field(description="Receive affiliate emails")] = None,
        clearcreditcard: Annotated[Optional[StrictBool], Field(description="Clear stored credit card details")] = None,
        latefeeoveride: Annotated[Optional[StrictBool], Field(description="Override Late Fees setting")] = None,
        overideduenotices: Annotated[Optional[StrictBool], Field(description="Override Overdue Notices setting")] = None,
        taxexempt: Annotated[Optional[StrictBool], Field(description="Exempt from tax collections")] = None,
        separateinvoices: Annotated[Optional[StrictBool], Field(description="Group items into one invoice")] = None,
        disableautocc: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic credit card processing")] = None,
        overrideautoclose: Annotated[Optional[StrictBool], Field(description="Enable/disable automatic account closure")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update client details

        Modifies an existing client's information

        :param username: Admin username/API identifier (required)
        :type username: str
        :param password: Admin password/API secret (required)
        :type password: str
        :param clientid: The ID of the client to update (required)
        :type clientid: int
        :param accesskey: Optional API access key
        :type accesskey: str
        :param responsetype: Response format
        :type responsetype: str
        :param clientemail: The email address of the client to update
        :type clientemail: str
        :param firstname: First name of the client
        :type firstname: str
        :param lastname: Last name of the client
        :type lastname: str
        :param companyname: Company name
        :type companyname: str
        :param email: Email address of the client
        :type email: str
        :param address1: Address line 1
        :type address1: str
        :param address2: Address line 2
        :type address2: str
        :param city: City
        :type city: str
        :param state: State
        :type state: str
        :param postcode: Postal code
        :type postcode: str
        :param country: 2 character ISO country code
        :type country: str
        :param phonenumber: Phone number
        :type phonenumber: str
        :param tax_id: Client's tax ID
        :type tax_id: str
        :param password2: Password for the new user account
        :type password2: str
        :param securityqid: Security question ID
        :type securityqid: int
        :param securityqans: Security question answer
        :type securityqans: str
        :param currency: Currency ID
        :type currency: int
        :param groupid: Client group ID
        :type groupid: int
        :param customfields: Base64 encoded serialized array of custom field values
        :type customfields: str
        :param language: Default language setting
        :type language: str
        :param clientip: Originating IP address
        :type clientip: str
        :param notes: Admin only notes
        :type notes: str
        :param status: The status (e.g., Active)
        :type status: str
        :param paymentmethod: The payment method for the order in the system format (e.g., paypal, mailin)
        :type paymentmethod: str
        :param email_preferences_general: Receive general emails
        :type email_preferences_general: bool
        :param email_preferences_product: Receive product emails
        :type email_preferences_product: bool
        :param email_preferences_domain: Receive domain emails
        :type email_preferences_domain: bool
        :param email_preferences_invoice: Receive invoice emails
        :type email_preferences_invoice: bool
        :param email_preferences_support: Receive support emails
        :type email_preferences_support: bool
        :param email_preferences_affiliate: Receive affiliate emails
        :type email_preferences_affiliate: bool
        :param clearcreditcard: Clear stored credit card details
        :type clearcreditcard: bool
        :param latefeeoveride: Override Late Fees setting
        :type latefeeoveride: bool
        :param overideduenotices: Override Overdue Notices setting
        :type overideduenotices: bool
        :param taxexempt: Exempt from tax collections
        :type taxexempt: bool
        :param separateinvoices: Group items into one invoice
        :type separateinvoices: bool
        :param disableautocc: Enable/disable automatic credit card processing
        :type disableautocc: bool
        :param overrideautoclose: Enable/disable automatic account closure
        :type overrideautoclose: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_client_serialize(
            username=username,
            password=password,
            clientid=clientid,
            accesskey=accesskey,
            responsetype=responsetype,
            clientemail=clientemail,
            firstname=firstname,
            lastname=lastname,
            companyname=companyname,
            email=email,
            address1=address1,
            address2=address2,
            city=city,
            state=state,
            postcode=postcode,
            country=country,
            phonenumber=phonenumber,
            tax_id=tax_id,
            password2=password2,
            securityqid=securityqid,
            securityqans=securityqans,
            currency=currency,
            groupid=groupid,
            customfields=customfields,
            language=language,
            clientip=clientip,
            notes=notes,
            status=status,
            paymentmethod=paymentmethod,
            email_preferences_general=email_preferences_general,
            email_preferences_product=email_preferences_product,
            email_preferences_domain=email_preferences_domain,
            email_preferences_invoice=email_preferences_invoice,
            email_preferences_support=email_preferences_support,
            email_preferences_affiliate=email_preferences_affiliate,
            clearcreditcard=clearcreditcard,
            latefeeoveride=latefeeoveride,
            overideduenotices=overideduenotices,
            taxexempt=taxexempt,
            separateinvoices=separateinvoices,
            disableautocc=disableautocc,
            overrideautoclose=overrideautoclose,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateClientResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_client_serialize(
        self,
        username,
        password,
        clientid,
        accesskey,
        responsetype,
        clientemail,
        firstname,
        lastname,
        companyname,
        email,
        address1,
        address2,
        city,
        state,
        postcode,
        country,
        phonenumber,
        tax_id,
        password2,
        securityqid,
        securityqans,
        currency,
        groupid,
        customfields,
        language,
        clientip,
        notes,
        status,
        paymentmethod,
        email_preferences_general,
        email_preferences_product,
        email_preferences_domain,
        email_preferences_invoice,
        email_preferences_support,
        email_preferences_affiliate,
        clearcreditcard,
        latefeeoveride,
        overideduenotices,
        taxexempt,
        separateinvoices,
        disableautocc,
        overrideautoclose,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if username is not None:
            _form_params.append(('username', username))
        if password is not None:
            _form_params.append(('password', password))
        if accesskey is not None:
            _form_params.append(('accesskey', accesskey))
        if responsetype is not None:
            _form_params.append(('responsetype', responsetype))
        if clientid is not None:
            _form_params.append(('clientid', clientid))
        if clientemail is not None:
            _form_params.append(('clientemail', clientemail))
        if firstname is not None:
            _form_params.append(('firstname', firstname))
        if lastname is not None:
            _form_params.append(('lastname', lastname))
        if companyname is not None:
            _form_params.append(('companyname', companyname))
        if email is not None:
            _form_params.append(('email', email))
        if address1 is not None:
            _form_params.append(('address1', address1))
        if address2 is not None:
            _form_params.append(('address2', address2))
        if city is not None:
            _form_params.append(('city', city))
        if state is not None:
            _form_params.append(('state', state))
        if postcode is not None:
            _form_params.append(('postcode', postcode))
        if country is not None:
            _form_params.append(('country', country))
        if phonenumber is not None:
            _form_params.append(('phonenumber', phonenumber))
        if tax_id is not None:
            _form_params.append(('tax_id', tax_id))
        if password2 is not None:
            _form_params.append(('password2', password2))
        if securityqid is not None:
            _form_params.append(('securityqid', securityqid))
        if securityqans is not None:
            _form_params.append(('securityqans', securityqans))
        if currency is not None:
            _form_params.append(('currency', currency))
        if groupid is not None:
            _form_params.append(('groupid', groupid))
        if customfields is not None:
            _form_params.append(('customfields', customfields))
        if language is not None:
            _form_params.append(('language', language))
        if clientip is not None:
            _form_params.append(('clientip', clientip))
        if notes is not None:
            _form_params.append(('notes', notes))
        if status is not None:
            _form_params.append(('status', status))
        if paymentmethod is not None:
            _form_params.append(('paymentmethod', paymentmethod))
        if email_preferences_general is not None:
            _form_params.append(('email_preferences_general', email_preferences_general))
        if email_preferences_product is not None:
            _form_params.append(('email_preferences_product', email_preferences_product))
        if email_preferences_domain is not None:
            _form_params.append(('email_preferences_domain', email_preferences_domain))
        if email_preferences_invoice is not None:
            _form_params.append(('email_preferences_invoice', email_preferences_invoice))
        if email_preferences_support is not None:
            _form_params.append(('email_preferences_support', email_preferences_support))
        if email_preferences_affiliate is not None:
            _form_params.append(('email_preferences_affiliate', email_preferences_affiliate))
        if clearcreditcard is not None:
            _form_params.append(('clearcreditcard', clearcreditcard))
        if latefeeoveride is not None:
            _form_params.append(('latefeeoveride', latefeeoveride))
        if overideduenotices is not None:
            _form_params.append(('overideduenotices', overideduenotices))
        if taxexempt is not None:
            _form_params.append(('taxexempt', taxexempt))
        if separateinvoices is not None:
            _form_params.append(('separateinvoices', separateinvoices))
        if disableautocc is not None:
            _form_params.append(('disableautocc', disableautocc))
        if overrideautoclose is not None:
            _form_params.append(('overrideautoclose', overrideautoclose))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api.php?action=UpdateClient',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


