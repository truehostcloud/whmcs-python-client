# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from whmcs_client.models.get_clients_response_all_of_clients import GetClientsResponseAllOfClients
from typing import Optional, Set
from typing_extensions import Self

class GetClientsResponse(BaseModel):
    """
    GetClientsResponse
    """ # noqa: E501
    result: Optional[StrictStr] = None
    message: Optional[StrictStr] = Field(default=None, description="Response message")
    totalresults: Optional[StrictInt] = Field(default=None, description="The total number of results available")
    startnumber: Optional[StrictInt] = Field(default=None, description="The starting number for the returned results")
    numreturned: Optional[StrictInt] = Field(default=None, description="The number of results returned")
    clients: Optional[GetClientsResponseAllOfClients] = None
    __properties: ClassVar[List[str]] = ["result", "message", "totalresults", "startnumber", "numreturned", "clients"]

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['success']):
            raise ValueError("must be one of enum values ('success')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetClientsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clients
        if self.clients:
            _dict['clients'] = self.clients.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetClientsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "result": obj.get("result"),
            "message": obj.get("message"),
            "totalresults": obj.get("totalresults"),
            "startnumber": obj.get("startnumber"),
            "numreturned": obj.get("numreturned"),
            "clients": GetClientsResponseAllOfClients.from_dict(obj["clients"]) if obj.get("clients") is not None else None
        })
        return _obj


