# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This client supports various WHMCS operations for managing clients, orders, and other resources.  Authentication is handled through username/password or API credentials. All requests are sent as form-encoded data to the /api.php endpoint. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddClientRequest(BaseModel):
    """
    AddClientRequest
    """ # noqa: E501
    username: StrictStr = Field(description="Admin username/API identifier")
    password: StrictStr = Field(description="Admin password/API secret")
    accesskey: Optional[StrictStr] = Field(default=None, description="Optional API access key")
    responsetype: Optional[StrictStr] = Field(default='json', description="Response format")
    action: StrictStr = Field(description="Must be 'AddClient'")
    owner_user_id: Optional[StrictInt] = Field(default=None, description="The ID of the user that should own the client")
    firstname: StrictStr = Field(description="First name of the client")
    lastname: StrictStr = Field(description="Last name of the client")
    companyname: Optional[StrictStr] = Field(default=None, description="Company name")
    email: StrictStr = Field(description="Email address of the client")
    address1: StrictStr = Field(description="Address line 1")
    address2: Optional[StrictStr] = Field(default=None, description="Address line 2")
    city: StrictStr = Field(description="City")
    state: StrictStr = Field(description="State")
    postcode: StrictStr = Field(description="Postal code")
    country: StrictStr = Field(description="2 character ISO country code")
    phonenumber: StrictStr = Field(description="Phone number")
    tax_id: Optional[StrictStr] = Field(default=None, description="Client's tax ID")
    password2: Optional[StrictStr] = Field(default=None, description="Password for the new user account")
    securityqid: Optional[StrictInt] = Field(default=None, description="Security question ID")
    securityqans: Optional[StrictStr] = Field(default=None, description="Security question answer")
    currency: Optional[StrictInt] = Field(default=None, description="Currency ID")
    groupid: Optional[StrictInt] = Field(default=None, description="Client group ID")
    customfields: Optional[StrictStr] = Field(default=None, description="Base64 encoded serialized array of custom field values")
    language: Optional[StrictStr] = Field(default=None, description="Default language setting")
    clientip: Optional[StrictStr] = Field(default=None, description="Originating IP address")
    notes: Optional[StrictStr] = Field(default=None, description="Admin only notes")
    marketingoptin: Optional[StrictBool] = Field(default=None, description="Opt-in to marketing emails")
    noemail: Optional[StrictBool] = Field(default=None, description="Do not send welcome email")
    skipvalidation: Optional[StrictBool] = Field(default=None, description="Do not enforce required fields")
    __properties: ClassVar[List[str]] = ["username", "password", "accesskey", "responsetype", "action", "owner_user_id", "firstname", "lastname", "companyname", "email", "address1", "address2", "city", "state", "postcode", "country", "phonenumber", "tax_id", "password2", "securityqid", "securityqans", "currency", "groupid", "customfields", "language", "clientip", "notes", "marketingoptin", "noemail", "skipvalidation"]

    @field_validator('responsetype')
    def responsetype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['json', 'xml']):
            raise ValueError("must be one of enum values ('json', 'xml')")
        return value

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AddClient']):
            raise ValueError("must be one of enum values ('AddClient')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddClientRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddClientRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "password": obj.get("password"),
            "accesskey": obj.get("accesskey"),
            "responsetype": obj.get("responsetype") if obj.get("responsetype") is not None else 'json',
            "action": obj.get("action"),
            "owner_user_id": obj.get("owner_user_id"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "companyname": obj.get("companyname"),
            "email": obj.get("email"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postcode": obj.get("postcode"),
            "country": obj.get("country"),
            "phonenumber": obj.get("phonenumber"),
            "tax_id": obj.get("tax_id"),
            "password2": obj.get("password2"),
            "securityqid": obj.get("securityqid"),
            "securityqans": obj.get("securityqans"),
            "currency": obj.get("currency"),
            "groupid": obj.get("groupid"),
            "customfields": obj.get("customfields"),
            "language": obj.get("language"),
            "clientip": obj.get("clientip"),
            "notes": obj.get("notes"),
            "marketingoptin": obj.get("marketingoptin"),
            "noemail": obj.get("noemail"),
            "skipvalidation": obj.get("skipvalidation")
        })
        return _obj


