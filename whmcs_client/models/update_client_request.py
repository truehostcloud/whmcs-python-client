# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateClientRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'clientid': 'int',
        'clientemail': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'companyname': 'str',
        'email': 'str',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'str',
        'postcode': 'str',
        'country': 'str',
        'phonenumber': 'str',
        'tax_id': 'str',
        'password2': 'str',
        'securityqid': 'int',
        'securityqans': 'str',
        'currency': 'int',
        'groupid': 'int',
        'customfields': 'str',
        'language': 'str',
        'clientip': 'str',
        'notes': 'str',
        'status': 'str',
        'paymentmethod': 'str',
        'email_preferences_general': 'bool',
        'email_preferences_product': 'bool',
        'email_preferences_domain': 'bool',
        'email_preferences_invoice': 'bool',
        'email_preferences_support': 'bool',
        'email_preferences_affiliate': 'bool',
        'clearcreditcard': 'bool',
        'latefeeoveride': 'bool',
        'overideduenotices': 'bool',
        'taxexempt': 'bool',
        'separateinvoices': 'bool',
        'disableautocc': 'bool',
        'overrideautoclose': 'bool'
    }

    attribute_map = {
        'action': 'action',
        'clientid': 'clientid',
        'clientemail': 'clientemail',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'companyname': 'companyname',
        'email': 'email',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'postcode': 'postcode',
        'country': 'country',
        'phonenumber': 'phonenumber',
        'tax_id': 'tax_id',
        'password2': 'password2',
        'securityqid': 'securityqid',
        'securityqans': 'securityqans',
        'currency': 'currency',
        'groupid': 'groupid',
        'customfields': 'customfields',
        'language': 'language',
        'clientip': 'clientip',
        'notes': 'notes',
        'status': 'status',
        'paymentmethod': 'paymentmethod',
        'email_preferences_general': 'email_preferences_general',
        'email_preferences_product': 'email_preferences_product',
        'email_preferences_domain': 'email_preferences_domain',
        'email_preferences_invoice': 'email_preferences_invoice',
        'email_preferences_support': 'email_preferences_support',
        'email_preferences_affiliate': 'email_preferences_affiliate',
        'clearcreditcard': 'clearcreditcard',
        'latefeeoveride': 'latefeeoveride',
        'overideduenotices': 'overideduenotices',
        'taxexempt': 'taxexempt',
        'separateinvoices': 'separateinvoices',
        'disableautocc': 'disableautocc',
        'overrideautoclose': 'overrideautoclose'
    }

    def __init__(self, action='UpdateClient', clientid=None, clientemail=None, firstname=None, lastname=None, companyname=None, email=None, address1=None, address2=None, city=None, state=None, postcode=None, country=None, phonenumber=None, tax_id=None, password2=None, securityqid=None, securityqans=None, currency=None, groupid=None, customfields=None, language=None, clientip=None, notes=None, status=None, paymentmethod=None, email_preferences_general=None, email_preferences_product=None, email_preferences_domain=None, email_preferences_invoice=None, email_preferences_support=None, email_preferences_affiliate=None, clearcreditcard=None, latefeeoveride=None, overideduenotices=None, taxexempt=None, separateinvoices=None, disableautocc=None, overrideautoclose=None):  # noqa: E501
        """UpdateClientRequest - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._clientid = None
        self._clientemail = None
        self._firstname = None
        self._lastname = None
        self._companyname = None
        self._email = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._state = None
        self._postcode = None
        self._country = None
        self._phonenumber = None
        self._tax_id = None
        self._password2 = None
        self._securityqid = None
        self._securityqans = None
        self._currency = None
        self._groupid = None
        self._customfields = None
        self._language = None
        self._clientip = None
        self._notes = None
        self._status = None
        self._paymentmethod = None
        self._email_preferences_general = None
        self._email_preferences_product = None
        self._email_preferences_domain = None
        self._email_preferences_invoice = None
        self._email_preferences_support = None
        self._email_preferences_affiliate = None
        self._clearcreditcard = None
        self._latefeeoveride = None
        self._overideduenotices = None
        self._taxexempt = None
        self._separateinvoices = None
        self._disableautocc = None
        self._overrideautoclose = None
        self.discriminator = None
        self.action = action
        if clientid is not None:
            self.clientid = clientid
        if clientemail is not None:
            self.clientemail = clientemail
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if companyname is not None:
            self.companyname = companyname
        if email is not None:
            self.email = email
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if postcode is not None:
            self.postcode = postcode
        if country is not None:
            self.country = country
        if phonenumber is not None:
            self.phonenumber = phonenumber
        if tax_id is not None:
            self.tax_id = tax_id
        if password2 is not None:
            self.password2 = password2
        if securityqid is not None:
            self.securityqid = securityqid
        if securityqans is not None:
            self.securityqans = securityqans
        if currency is not None:
            self.currency = currency
        if groupid is not None:
            self.groupid = groupid
        if customfields is not None:
            self.customfields = customfields
        if language is not None:
            self.language = language
        if clientip is not None:
            self.clientip = clientip
        if notes is not None:
            self.notes = notes
        if status is not None:
            self.status = status
        if paymentmethod is not None:
            self.paymentmethod = paymentmethod
        if email_preferences_general is not None:
            self.email_preferences_general = email_preferences_general
        if email_preferences_product is not None:
            self.email_preferences_product = email_preferences_product
        if email_preferences_domain is not None:
            self.email_preferences_domain = email_preferences_domain
        if email_preferences_invoice is not None:
            self.email_preferences_invoice = email_preferences_invoice
        if email_preferences_support is not None:
            self.email_preferences_support = email_preferences_support
        if email_preferences_affiliate is not None:
            self.email_preferences_affiliate = email_preferences_affiliate
        if clearcreditcard is not None:
            self.clearcreditcard = clearcreditcard
        if latefeeoveride is not None:
            self.latefeeoveride = latefeeoveride
        if overideduenotices is not None:
            self.overideduenotices = overideduenotices
        if taxexempt is not None:
            self.taxexempt = taxexempt
        if separateinvoices is not None:
            self.separateinvoices = separateinvoices
        if disableautocc is not None:
            self.disableautocc = disableautocc
        if overrideautoclose is not None:
            self.overrideautoclose = overrideautoclose

    @property
    def action(self):
        """Gets the action of this UpdateClientRequest.  # noqa: E501

        Must be 'UpdateClient'  # noqa: E501

        :return: The action of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateClientRequest.

        Must be 'UpdateClient'  # noqa: E501

        :param action: The action of this UpdateClientRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["UpdateClient"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def clientid(self):
        """Gets the clientid of this UpdateClientRequest.  # noqa: E501

        The ID of the client to update  # noqa: E501

        :return: The clientid of this UpdateClientRequest.  # noqa: E501
        :rtype: int
        """
        return self._clientid

    @clientid.setter
    def clientid(self, clientid):
        """Sets the clientid of this UpdateClientRequest.

        The ID of the client to update  # noqa: E501

        :param clientid: The clientid of this UpdateClientRequest.  # noqa: E501
        :type: int
        """

        self._clientid = clientid

    @property
    def clientemail(self):
        """Gets the clientemail of this UpdateClientRequest.  # noqa: E501

        The email address of the client to update  # noqa: E501

        :return: The clientemail of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._clientemail

    @clientemail.setter
    def clientemail(self, clientemail):
        """Sets the clientemail of this UpdateClientRequest.

        The email address of the client to update  # noqa: E501

        :param clientemail: The clientemail of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._clientemail = clientemail

    @property
    def firstname(self):
        """Gets the firstname of this UpdateClientRequest.  # noqa: E501

        First name of the client  # noqa: E501

        :return: The firstname of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UpdateClientRequest.

        First name of the client  # noqa: E501

        :param firstname: The firstname of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this UpdateClientRequest.  # noqa: E501

        Last name of the client  # noqa: E501

        :return: The lastname of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UpdateClientRequest.

        Last name of the client  # noqa: E501

        :param lastname: The lastname of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def companyname(self):
        """Gets the companyname of this UpdateClientRequest.  # noqa: E501

        Company name  # noqa: E501

        :return: The companyname of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._companyname

    @companyname.setter
    def companyname(self, companyname):
        """Sets the companyname of this UpdateClientRequest.

        Company name  # noqa: E501

        :param companyname: The companyname of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._companyname = companyname

    @property
    def email(self):
        """Gets the email of this UpdateClientRequest.  # noqa: E501

        Email address of the client  # noqa: E501

        :return: The email of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdateClientRequest.

        Email address of the client  # noqa: E501

        :param email: The email of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def address1(self):
        """Gets the address1 of this UpdateClientRequest.  # noqa: E501

        Address line 1  # noqa: E501

        :return: The address1 of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this UpdateClientRequest.

        Address line 1  # noqa: E501

        :param address1: The address1 of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this UpdateClientRequest.  # noqa: E501

        Address line 2  # noqa: E501

        :return: The address2 of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this UpdateClientRequest.

        Address line 2  # noqa: E501

        :param address2: The address2 of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this UpdateClientRequest.  # noqa: E501

        City  # noqa: E501

        :return: The city of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UpdateClientRequest.

        City  # noqa: E501

        :param city: The city of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this UpdateClientRequest.  # noqa: E501

        State  # noqa: E501

        :return: The state of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateClientRequest.

        State  # noqa: E501

        :param state: The state of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def postcode(self):
        """Gets the postcode of this UpdateClientRequest.  # noqa: E501

        Postal code  # noqa: E501

        :return: The postcode of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this UpdateClientRequest.

        Postal code  # noqa: E501

        :param postcode: The postcode of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._postcode = postcode

    @property
    def country(self):
        """Gets the country of this UpdateClientRequest.  # noqa: E501

        2 character ISO country code  # noqa: E501

        :return: The country of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UpdateClientRequest.

        2 character ISO country code  # noqa: E501

        :param country: The country of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phonenumber(self):
        """Gets the phonenumber of this UpdateClientRequest.  # noqa: E501

        Phone number  # noqa: E501

        :return: The phonenumber of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._phonenumber

    @phonenumber.setter
    def phonenumber(self, phonenumber):
        """Sets the phonenumber of this UpdateClientRequest.

        Phone number  # noqa: E501

        :param phonenumber: The phonenumber of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._phonenumber = phonenumber

    @property
    def tax_id(self):
        """Gets the tax_id of this UpdateClientRequest.  # noqa: E501

        Client's tax ID  # noqa: E501

        :return: The tax_id of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this UpdateClientRequest.

        Client's tax ID  # noqa: E501

        :param tax_id: The tax_id of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def password2(self):
        """Gets the password2 of this UpdateClientRequest.  # noqa: E501

        Password for the new user account  # noqa: E501

        :return: The password2 of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2):
        """Sets the password2 of this UpdateClientRequest.

        Password for the new user account  # noqa: E501

        :param password2: The password2 of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._password2 = password2

    @property
    def securityqid(self):
        """Gets the securityqid of this UpdateClientRequest.  # noqa: E501

        Security question ID  # noqa: E501

        :return: The securityqid of this UpdateClientRequest.  # noqa: E501
        :rtype: int
        """
        return self._securityqid

    @securityqid.setter
    def securityqid(self, securityqid):
        """Sets the securityqid of this UpdateClientRequest.

        Security question ID  # noqa: E501

        :param securityqid: The securityqid of this UpdateClientRequest.  # noqa: E501
        :type: int
        """

        self._securityqid = securityqid

    @property
    def securityqans(self):
        """Gets the securityqans of this UpdateClientRequest.  # noqa: E501

        Security question answer  # noqa: E501

        :return: The securityqans of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._securityqans

    @securityqans.setter
    def securityqans(self, securityqans):
        """Sets the securityqans of this UpdateClientRequest.

        Security question answer  # noqa: E501

        :param securityqans: The securityqans of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._securityqans = securityqans

    @property
    def currency(self):
        """Gets the currency of this UpdateClientRequest.  # noqa: E501

        Currency ID  # noqa: E501

        :return: The currency of this UpdateClientRequest.  # noqa: E501
        :rtype: int
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UpdateClientRequest.

        Currency ID  # noqa: E501

        :param currency: The currency of this UpdateClientRequest.  # noqa: E501
        :type: int
        """

        self._currency = currency

    @property
    def groupid(self):
        """Gets the groupid of this UpdateClientRequest.  # noqa: E501

        Client group ID  # noqa: E501

        :return: The groupid of this UpdateClientRequest.  # noqa: E501
        :rtype: int
        """
        return self._groupid

    @groupid.setter
    def groupid(self, groupid):
        """Sets the groupid of this UpdateClientRequest.

        Client group ID  # noqa: E501

        :param groupid: The groupid of this UpdateClientRequest.  # noqa: E501
        :type: int
        """

        self._groupid = groupid

    @property
    def customfields(self):
        """Gets the customfields of this UpdateClientRequest.  # noqa: E501

        Base64 encoded serialized array of custom field values  # noqa: E501

        :return: The customfields of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._customfields

    @customfields.setter
    def customfields(self, customfields):
        """Sets the customfields of this UpdateClientRequest.

        Base64 encoded serialized array of custom field values  # noqa: E501

        :param customfields: The customfields of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._customfields = customfields

    @property
    def language(self):
        """Gets the language of this UpdateClientRequest.  # noqa: E501

        Default language setting  # noqa: E501

        :return: The language of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UpdateClientRequest.

        Default language setting  # noqa: E501

        :param language: The language of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def clientip(self):
        """Gets the clientip of this UpdateClientRequest.  # noqa: E501

        Originating IP address  # noqa: E501

        :return: The clientip of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._clientip

    @clientip.setter
    def clientip(self, clientip):
        """Sets the clientip of this UpdateClientRequest.

        Originating IP address  # noqa: E501

        :param clientip: The clientip of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._clientip = clientip

    @property
    def notes(self):
        """Gets the notes of this UpdateClientRequest.  # noqa: E501

        Admin only notes  # noqa: E501

        :return: The notes of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateClientRequest.

        Admin only notes  # noqa: E501

        :param notes: The notes of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def status(self):
        """Gets the status of this UpdateClientRequest.  # noqa: E501

        The status (e.g., Active)  # noqa: E501

        :return: The status of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateClientRequest.

        The status (e.g., Active)  # noqa: E501

        :param status: The status of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def paymentmethod(self):
        """Gets the paymentmethod of this UpdateClientRequest.  # noqa: E501

        The payment method for the order in the system format (e.g., paypal, mailin)  # noqa: E501

        :return: The paymentmethod of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._paymentmethod

    @paymentmethod.setter
    def paymentmethod(self, paymentmethod):
        """Sets the paymentmethod of this UpdateClientRequest.

        The payment method for the order in the system format (e.g., paypal, mailin)  # noqa: E501

        :param paymentmethod: The paymentmethod of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._paymentmethod = paymentmethod

    @property
    def email_preferences_general(self):
        """Gets the email_preferences_general of this UpdateClientRequest.  # noqa: E501

        Receive general emails  # noqa: E501

        :return: The email_preferences_general of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_general

    @email_preferences_general.setter
    def email_preferences_general(self, email_preferences_general):
        """Sets the email_preferences_general of this UpdateClientRequest.

        Receive general emails  # noqa: E501

        :param email_preferences_general: The email_preferences_general of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_general = email_preferences_general

    @property
    def email_preferences_product(self):
        """Gets the email_preferences_product of this UpdateClientRequest.  # noqa: E501

        Receive product emails  # noqa: E501

        :return: The email_preferences_product of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_product

    @email_preferences_product.setter
    def email_preferences_product(self, email_preferences_product):
        """Sets the email_preferences_product of this UpdateClientRequest.

        Receive product emails  # noqa: E501

        :param email_preferences_product: The email_preferences_product of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_product = email_preferences_product

    @property
    def email_preferences_domain(self):
        """Gets the email_preferences_domain of this UpdateClientRequest.  # noqa: E501

        Receive domain emails  # noqa: E501

        :return: The email_preferences_domain of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_domain

    @email_preferences_domain.setter
    def email_preferences_domain(self, email_preferences_domain):
        """Sets the email_preferences_domain of this UpdateClientRequest.

        Receive domain emails  # noqa: E501

        :param email_preferences_domain: The email_preferences_domain of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_domain = email_preferences_domain

    @property
    def email_preferences_invoice(self):
        """Gets the email_preferences_invoice of this UpdateClientRequest.  # noqa: E501

        Receive invoice emails  # noqa: E501

        :return: The email_preferences_invoice of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_invoice

    @email_preferences_invoice.setter
    def email_preferences_invoice(self, email_preferences_invoice):
        """Sets the email_preferences_invoice of this UpdateClientRequest.

        Receive invoice emails  # noqa: E501

        :param email_preferences_invoice: The email_preferences_invoice of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_invoice = email_preferences_invoice

    @property
    def email_preferences_support(self):
        """Gets the email_preferences_support of this UpdateClientRequest.  # noqa: E501

        Receive support emails  # noqa: E501

        :return: The email_preferences_support of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_support

    @email_preferences_support.setter
    def email_preferences_support(self, email_preferences_support):
        """Sets the email_preferences_support of this UpdateClientRequest.

        Receive support emails  # noqa: E501

        :param email_preferences_support: The email_preferences_support of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_support = email_preferences_support

    @property
    def email_preferences_affiliate(self):
        """Gets the email_preferences_affiliate of this UpdateClientRequest.  # noqa: E501

        Receive affiliate emails  # noqa: E501

        :return: The email_preferences_affiliate of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._email_preferences_affiliate

    @email_preferences_affiliate.setter
    def email_preferences_affiliate(self, email_preferences_affiliate):
        """Sets the email_preferences_affiliate of this UpdateClientRequest.

        Receive affiliate emails  # noqa: E501

        :param email_preferences_affiliate: The email_preferences_affiliate of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._email_preferences_affiliate = email_preferences_affiliate

    @property
    def clearcreditcard(self):
        """Gets the clearcreditcard of this UpdateClientRequest.  # noqa: E501

        Clear stored credit card details  # noqa: E501

        :return: The clearcreditcard of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._clearcreditcard

    @clearcreditcard.setter
    def clearcreditcard(self, clearcreditcard):
        """Sets the clearcreditcard of this UpdateClientRequest.

        Clear stored credit card details  # noqa: E501

        :param clearcreditcard: The clearcreditcard of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._clearcreditcard = clearcreditcard

    @property
    def latefeeoveride(self):
        """Gets the latefeeoveride of this UpdateClientRequest.  # noqa: E501

        Override Late Fees setting  # noqa: E501

        :return: The latefeeoveride of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._latefeeoveride

    @latefeeoveride.setter
    def latefeeoveride(self, latefeeoveride):
        """Sets the latefeeoveride of this UpdateClientRequest.

        Override Late Fees setting  # noqa: E501

        :param latefeeoveride: The latefeeoveride of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._latefeeoveride = latefeeoveride

    @property
    def overideduenotices(self):
        """Gets the overideduenotices of this UpdateClientRequest.  # noqa: E501

        Override Overdue Notices setting  # noqa: E501

        :return: The overideduenotices of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._overideduenotices

    @overideduenotices.setter
    def overideduenotices(self, overideduenotices):
        """Sets the overideduenotices of this UpdateClientRequest.

        Override Overdue Notices setting  # noqa: E501

        :param overideduenotices: The overideduenotices of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._overideduenotices = overideduenotices

    @property
    def taxexempt(self):
        """Gets the taxexempt of this UpdateClientRequest.  # noqa: E501

        Exempt from tax collections  # noqa: E501

        :return: The taxexempt of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._taxexempt

    @taxexempt.setter
    def taxexempt(self, taxexempt):
        """Sets the taxexempt of this UpdateClientRequest.

        Exempt from tax collections  # noqa: E501

        :param taxexempt: The taxexempt of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._taxexempt = taxexempt

    @property
    def separateinvoices(self):
        """Gets the separateinvoices of this UpdateClientRequest.  # noqa: E501

        Group items into one invoice  # noqa: E501

        :return: The separateinvoices of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._separateinvoices

    @separateinvoices.setter
    def separateinvoices(self, separateinvoices):
        """Sets the separateinvoices of this UpdateClientRequest.

        Group items into one invoice  # noqa: E501

        :param separateinvoices: The separateinvoices of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._separateinvoices = separateinvoices

    @property
    def disableautocc(self):
        """Gets the disableautocc of this UpdateClientRequest.  # noqa: E501

        Enable/disable automatic credit card processing  # noqa: E501

        :return: The disableautocc of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disableautocc

    @disableautocc.setter
    def disableautocc(self, disableautocc):
        """Sets the disableautocc of this UpdateClientRequest.

        Enable/disable automatic credit card processing  # noqa: E501

        :param disableautocc: The disableautocc of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._disableautocc = disableautocc

    @property
    def overrideautoclose(self):
        """Gets the overrideautoclose of this UpdateClientRequest.  # noqa: E501

        Enable/disable automatic account closure  # noqa: E501

        :return: The overrideautoclose of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._overrideautoclose

    @overrideautoclose.setter
    def overrideautoclose(self, overrideautoclose):
        """Sets the overrideautoclose of this UpdateClientRequest.

        Enable/disable automatic account closure  # noqa: E501

        :param overrideautoclose: The overrideautoclose of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._overrideautoclose = overrideautoclose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateClientRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClientRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
