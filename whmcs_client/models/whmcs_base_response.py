# coding: utf-8

"""
    WHMCS API

    OpenAPI specification for the WHMCS API endpoints.  This specification uses discriminators to properly handle polymorphic request/response schemas. The 'action' field serves as the discriminator property to differentiate between different request and response types (AddClient, UpdateClient, AddOrder).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WHMCSBaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'str',
        'action': 'str',
        'warnings': 'list[str]',
        'message': 'str'
    }

    attribute_map = {
        'result': 'result',
        'action': 'action',
        'warnings': 'warnings',
        'message': 'message'
    }

    def __init__(self, result=None, action=None, warnings=None, message=None):  # noqa: E501
        """WHMCSBaseResponse - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._action = None
        self._warnings = None
        self._message = None
        self.discriminator = None
        self.result = result
        self.action = action
        if warnings is not None:
            self.warnings = warnings
        if message is not None:
            self.message = message

    @property
    def result(self):
        """Gets the result of this WHMCSBaseResponse.  # noqa: E501

        The result of the operation  # noqa: E501

        :return: The result of this WHMCSBaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this WHMCSBaseResponse.

        The result of the operation  # noqa: E501

        :param result: The result of this WHMCSBaseResponse.  # noqa: E501
        :type: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        allowed_values = ["success", "error"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def action(self):
        """Gets the action of this WHMCSBaseResponse.  # noqa: E501

        The action that was performed  # noqa: E501

        :return: The action of this WHMCSBaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this WHMCSBaseResponse.

        The action that was performed  # noqa: E501

        :param action: The action of this WHMCSBaseResponse.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def warnings(self):
        """Gets the warnings of this WHMCSBaseResponse.  # noqa: E501

        Any warning messages  # noqa: E501

        :return: The warnings of this WHMCSBaseResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this WHMCSBaseResponse.

        Any warning messages  # noqa: E501

        :param warnings: The warnings of this WHMCSBaseResponse.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    @property
    def message(self):
        """Gets the message of this WHMCSBaseResponse.  # noqa: E501

        Success or error message  # noqa: E501

        :return: The message of this WHMCSBaseResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WHMCSBaseResponse.

        Success or error message  # noqa: E501

        :param message: The message of this WHMCSBaseResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WHMCSBaseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WHMCSBaseResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
