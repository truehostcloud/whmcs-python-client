# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClientInfo(BaseModel):
    """
    ClientInfo
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="The client ID")
    firstname: Optional[StrictStr] = Field(default=None, description="The client's first name")
    lastname: Optional[StrictStr] = Field(default=None, description="The client's last name")
    companyname: Optional[StrictStr] = Field(default=None, description="The client's company name")
    email: Optional[StrictStr] = Field(default=None, description="The client's email address")
    datecreated: Optional[date] = Field(default=None, description="The date the client was created")
    groupid: Optional[StrictInt] = Field(default=None, description="The client's group ID")
    status: Optional[StrictStr] = Field(default=None, description="The client's status (Active, Inactive, Closed)")
    __properties: ClassVar[List[str]] = ["id", "firstname", "lastname", "companyname", "email", "datecreated", "groupid", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "firstname": obj.get("firstname"),
            "lastname": obj.get("lastname"),
            "companyname": obj.get("companyname"),
            "email": obj.get("email"),
            "datecreated": obj.get("datecreated"),
            "groupid": obj.get("groupid"),
            "status": obj.get("status")
        })
        return _obj


