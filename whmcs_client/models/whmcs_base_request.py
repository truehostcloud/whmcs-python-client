# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This client supports various WHMCS operations for managing clients, orders, and other resources.  Authentication is handled through username/password or API credentials. All requests are sent as form-encoded data to the /api.php endpoint.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WHMCSBaseRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'accesskey': 'str',
        'responsetype': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'accesskey': 'accesskey',
        'responsetype': 'responsetype'
    }

    def __init__(self, username=None, password=None, accesskey=None, responsetype='json'):  # noqa: E501
        """WHMCSBaseRequest - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._accesskey = None
        self._responsetype = None
        self.discriminator = None
        self.username = username
        self.password = password
        if accesskey is not None:
            self.accesskey = accesskey
        if responsetype is not None:
            self.responsetype = responsetype

    @property
    def username(self):
        """Gets the username of this WHMCSBaseRequest.  # noqa: E501

        Admin username/API identifier  # noqa: E501

        :return: The username of this WHMCSBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this WHMCSBaseRequest.

        Admin username/API identifier  # noqa: E501

        :param username: The username of this WHMCSBaseRequest.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this WHMCSBaseRequest.  # noqa: E501

        Admin password/API secret  # noqa: E501

        :return: The password of this WHMCSBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this WHMCSBaseRequest.

        Admin password/API secret  # noqa: E501

        :param password: The password of this WHMCSBaseRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def accesskey(self):
        """Gets the accesskey of this WHMCSBaseRequest.  # noqa: E501

        Optional API access key  # noqa: E501

        :return: The accesskey of this WHMCSBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._accesskey

    @accesskey.setter
    def accesskey(self, accesskey):
        """Sets the accesskey of this WHMCSBaseRequest.

        Optional API access key  # noqa: E501

        :param accesskey: The accesskey of this WHMCSBaseRequest.  # noqa: E501
        :type: str
        """

        self._accesskey = accesskey

    @property
    def responsetype(self):
        """Gets the responsetype of this WHMCSBaseRequest.  # noqa: E501

        Response format  # noqa: E501

        :return: The responsetype of this WHMCSBaseRequest.  # noqa: E501
        :rtype: str
        """
        return self._responsetype

    @responsetype.setter
    def responsetype(self, responsetype):
        """Sets the responsetype of this WHMCSBaseRequest.

        Response format  # noqa: E501

        :param responsetype: The responsetype of this WHMCSBaseRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["json", "xml"]  # noqa: E501
        if responsetype not in allowed_values:
            raise ValueError(
                "Invalid value for `responsetype` ({0}), must be one of {1}"  # noqa: E501
                .format(responsetype, allowed_values)
            )

        self._responsetype = responsetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WHMCSBaseRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WHMCSBaseRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
