# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'clientid': 'int',
        'clientemail': 'str',
        'paymentmethod': 'str',
        'pid': 'list[int]',
        'qty': 'list[int]',
        'domain': 'list[str]',
        'billingcycle': 'list[str]',
        'domaintype': 'list[str]',
        'regperiod': 'list[int]',
        'idnlanguage': 'list[str]',
        'eppcode': 'list[str]',
        'nameserver1': 'str',
        'nameserver2': 'str',
        'nameserver3': 'str',
        'nameserver4': 'str',
        'nameserver5': 'str',
        'configoptions': 'list[str]',
        'priceoverride': 'list[float]',
        'promocode': 'str',
        'promooverride': 'bool',
        'affid': 'int',
        'noinvoice': 'bool',
        'noinvoiceemail': 'bool',
        'addons': 'list[str]',
        'addonsqty': 'list[str]',
        'hostname': 'list[str]',
        'ns1prefix': 'list[str]',
        'ns2prefix': 'list[str]',
        'rootpw': 'list[str]',
        'contactid': 'int',
        'dnsmanagement': 'list[bool]',
        'domainfields': 'list[str]',
        'emailforwarding': 'list[bool]',
        'idprotection': 'list[bool]',
        'domainpriceoverride': 'list[float]',
        'domainrenewoverride': 'list[float]',
        'domainrenewals': 'dict(str, int)',
        'addonid': 'int',
        'addonidqty': 'int',
        'serviceid': 'int',
        'addonids': 'list[int]',
        'addonidsqty': 'list[int]',
        'serviceids': 'list[int]',
        'servicerenewals': 'list[int]',
        'addonrenewals': 'list[int]'
    }

    attribute_map = {
        'action': 'action',
        'clientid': 'clientid',
        'clientemail': 'clientemail',
        'paymentmethod': 'paymentmethod',
        'pid': 'pid',
        'qty': 'qty',
        'domain': 'domain',
        'billingcycle': 'billingcycle',
        'domaintype': 'domaintype',
        'regperiod': 'regperiod',
        'idnlanguage': 'idnlanguage',
        'eppcode': 'eppcode',
        'nameserver1': 'nameserver1',
        'nameserver2': 'nameserver2',
        'nameserver3': 'nameserver3',
        'nameserver4': 'nameserver4',
        'nameserver5': 'nameserver5',
        'configoptions': 'configoptions',
        'priceoverride': 'priceoverride',
        'promocode': 'promocode',
        'promooverride': 'promooverride',
        'affid': 'affid',
        'noinvoice': 'noinvoice',
        'noinvoiceemail': 'noinvoiceemail',
        'addons': 'addons',
        'addonsqty': 'addonsqty',
        'hostname': 'hostname',
        'ns1prefix': 'ns1prefix',
        'ns2prefix': 'ns2prefix',
        'rootpw': 'rootpw',
        'contactid': 'contactid',
        'dnsmanagement': 'dnsmanagement',
        'domainfields': 'domainfields',
        'emailforwarding': 'emailforwarding',
        'idprotection': 'idprotection',
        'domainpriceoverride': 'domainpriceoverride',
        'domainrenewoverride': 'domainrenewoverride',
        'domainrenewals': 'domainrenewals',
        'addonid': 'addonid',
        'addonidqty': 'addonidqty',
        'serviceid': 'serviceid',
        'addonids': 'addonids',
        'addonidsqty': 'addonidsqty',
        'serviceids': 'serviceids',
        'servicerenewals': 'servicerenewals',
        'addonrenewals': 'addonrenewals'
    }

    def __init__(self, action='AddOrder', clientid=None, clientemail=None, paymentmethod=None, pid=None, qty=None, domain=None, billingcycle=None, domaintype=None, regperiod=None, idnlanguage=None, eppcode=None, nameserver1=None, nameserver2=None, nameserver3=None, nameserver4=None, nameserver5=None, configoptions=None, priceoverride=None, promocode=None, promooverride=None, affid=None, noinvoice=None, noinvoiceemail=None, addons=None, addonsqty=None, hostname=None, ns1prefix=None, ns2prefix=None, rootpw=None, contactid=None, dnsmanagement=None, domainfields=None, emailforwarding=None, idprotection=None, domainpriceoverride=None, domainrenewoverride=None, domainrenewals=None, addonid=None, addonidqty=None, serviceid=None, addonids=None, addonidsqty=None, serviceids=None, servicerenewals=None, addonrenewals=None):  # noqa: E501
        """AddOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._clientid = None
        self._clientemail = None
        self._paymentmethod = None
        self._pid = None
        self._qty = None
        self._domain = None
        self._billingcycle = None
        self._domaintype = None
        self._regperiod = None
        self._idnlanguage = None
        self._eppcode = None
        self._nameserver1 = None
        self._nameserver2 = None
        self._nameserver3 = None
        self._nameserver4 = None
        self._nameserver5 = None
        self._configoptions = None
        self._priceoverride = None
        self._promocode = None
        self._promooverride = None
        self._affid = None
        self._noinvoice = None
        self._noinvoiceemail = None
        self._addons = None
        self._addonsqty = None
        self._hostname = None
        self._ns1prefix = None
        self._ns2prefix = None
        self._rootpw = None
        self._contactid = None
        self._dnsmanagement = None
        self._domainfields = None
        self._emailforwarding = None
        self._idprotection = None
        self._domainpriceoverride = None
        self._domainrenewoverride = None
        self._domainrenewals = None
        self._addonid = None
        self._addonidqty = None
        self._serviceid = None
        self._addonids = None
        self._addonidsqty = None
        self._serviceids = None
        self._servicerenewals = None
        self._addonrenewals = None
        self.discriminator = None
        self.action = action
        self.clientid = clientid
        if clientemail is not None:
            self.clientemail = clientemail
        self.paymentmethod = paymentmethod
        if pid is not None:
            self.pid = pid
        if qty is not None:
            self.qty = qty
        if domain is not None:
            self.domain = domain
        if billingcycle is not None:
            self.billingcycle = billingcycle
        if domaintype is not None:
            self.domaintype = domaintype
        if regperiod is not None:
            self.regperiod = regperiod
        if idnlanguage is not None:
            self.idnlanguage = idnlanguage
        if eppcode is not None:
            self.eppcode = eppcode
        if nameserver1 is not None:
            self.nameserver1 = nameserver1
        if nameserver2 is not None:
            self.nameserver2 = nameserver2
        if nameserver3 is not None:
            self.nameserver3 = nameserver3
        if nameserver4 is not None:
            self.nameserver4 = nameserver4
        if nameserver5 is not None:
            self.nameserver5 = nameserver5
        if configoptions is not None:
            self.configoptions = configoptions
        if priceoverride is not None:
            self.priceoverride = priceoverride
        if promocode is not None:
            self.promocode = promocode
        if promooverride is not None:
            self.promooverride = promooverride
        if affid is not None:
            self.affid = affid
        if noinvoice is not None:
            self.noinvoice = noinvoice
        if noinvoiceemail is not None:
            self.noinvoiceemail = noinvoiceemail
        if addons is not None:
            self.addons = addons
        if addonsqty is not None:
            self.addonsqty = addonsqty
        if hostname is not None:
            self.hostname = hostname
        if ns1prefix is not None:
            self.ns1prefix = ns1prefix
        if ns2prefix is not None:
            self.ns2prefix = ns2prefix
        if rootpw is not None:
            self.rootpw = rootpw
        if contactid is not None:
            self.contactid = contactid
        if dnsmanagement is not None:
            self.dnsmanagement = dnsmanagement
        if domainfields is not None:
            self.domainfields = domainfields
        if emailforwarding is not None:
            self.emailforwarding = emailforwarding
        if idprotection is not None:
            self.idprotection = idprotection
        if domainpriceoverride is not None:
            self.domainpriceoverride = domainpriceoverride
        if domainrenewoverride is not None:
            self.domainrenewoverride = domainrenewoverride
        if domainrenewals is not None:
            self.domainrenewals = domainrenewals
        if addonid is not None:
            self.addonid = addonid
        if addonidqty is not None:
            self.addonidqty = addonidqty
        if serviceid is not None:
            self.serviceid = serviceid
        if addonids is not None:
            self.addonids = addonids
        if addonidsqty is not None:
            self.addonidsqty = addonidsqty
        if serviceids is not None:
            self.serviceids = serviceids
        if servicerenewals is not None:
            self.servicerenewals = servicerenewals
        if addonrenewals is not None:
            self.addonrenewals = addonrenewals

    @property
    def action(self):
        """Gets the action of this AddOrderRequest.  # noqa: E501

        Must be 'AddOrder'  # noqa: E501

        :return: The action of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AddOrderRequest.

        Must be 'AddOrder'  # noqa: E501

        :param action: The action of this AddOrderRequest.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["AddOrder"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def clientid(self):
        """Gets the clientid of this AddOrderRequest.  # noqa: E501

        The ID of the client to add the order for  # noqa: E501

        :return: The clientid of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._clientid

    @clientid.setter
    def clientid(self, clientid):
        """Sets the clientid of this AddOrderRequest.

        The ID of the client to add the order for  # noqa: E501

        :param clientid: The clientid of this AddOrderRequest.  # noqa: E501
        :type: int
        """
        if clientid is None:
            raise ValueError("Invalid value for `clientid`, must not be `None`")  # noqa: E501

        self._clientid = clientid

    @property
    def clientemail(self):
        """Gets the clientemail of this AddOrderRequest.  # noqa: E501

        The email address of the client to update  # noqa: E501

        :return: The clientemail of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._clientemail

    @clientemail.setter
    def clientemail(self, clientemail):
        """Sets the clientemail of this AddOrderRequest.

        The email address of the client to update  # noqa: E501

        :param clientemail: The clientemail of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._clientemail = clientemail

    @property
    def paymentmethod(self):
        """Gets the paymentmethod of this AddOrderRequest.  # noqa: E501

        The payment method for the order in the system format (e.g., paypal, mailin)  # noqa: E501

        :return: The paymentmethod of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._paymentmethod

    @paymentmethod.setter
    def paymentmethod(self, paymentmethod):
        """Sets the paymentmethod of this AddOrderRequest.

        The payment method for the order in the system format (e.g., paypal, mailin)  # noqa: E501

        :param paymentmethod: The paymentmethod of this AddOrderRequest.  # noqa: E501
        :type: str
        """
        if paymentmethod is None:
            raise ValueError("Invalid value for `paymentmethod`, must not be `None`")  # noqa: E501

        self._paymentmethod = paymentmethod

    @property
    def pid(self):
        """Gets the pid of this AddOrderRequest.  # noqa: E501

        Array of product IDs to add to the order  # noqa: E501

        :return: The pid of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this AddOrderRequest.

        Array of product IDs to add to the order  # noqa: E501

        :param pid: The pid of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._pid = pid

    @property
    def qty(self):
        """Gets the qty of this AddOrderRequest.  # noqa: E501

        Array of product quantities  # noqa: E501

        :return: The qty of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this AddOrderRequest.

        Array of product quantities  # noqa: E501

        :param qty: The qty of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._qty = qty

    @property
    def domain(self):
        """Gets the domain of this AddOrderRequest.  # noqa: E501

        Array of domain names associated with the products/domains  # noqa: E501

        :return: The domain of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AddOrderRequest.

        Array of domain names associated with the products/domains  # noqa: E501

        :param domain: The domain of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._domain = domain

    @property
    def billingcycle(self):
        """Gets the billingcycle of this AddOrderRequest.  # noqa: E501

        Array of billing cycles for the products  # noqa: E501

        :return: The billingcycle of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._billingcycle

    @billingcycle.setter
    def billingcycle(self, billingcycle):
        """Sets the billingcycle of this AddOrderRequest.

        Array of billing cycles for the products  # noqa: E501

        :param billingcycle: The billingcycle of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._billingcycle = billingcycle

    @property
    def domaintype(self):
        """Gets the domaintype of this AddOrderRequest.  # noqa: E501

        For domain registrations, array of register or transfer values  # noqa: E501

        :return: The domaintype of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._domaintype

    @domaintype.setter
    def domaintype(self, domaintype):
        """Sets the domaintype of this AddOrderRequest.

        For domain registrations, array of register or transfer values  # noqa: E501

        :param domaintype: The domaintype of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._domaintype = domaintype

    @property
    def regperiod(self):
        """Gets the regperiod of this AddOrderRequest.  # noqa: E501

        For domain registrations, the registration periods for the domains  # noqa: E501

        :return: The regperiod of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._regperiod

    @regperiod.setter
    def regperiod(self, regperiod):
        """Sets the regperiod of this AddOrderRequest.

        For domain registrations, the registration periods for the domains  # noqa: E501

        :param regperiod: The regperiod of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._regperiod = regperiod

    @property
    def idnlanguage(self):
        """Gets the idnlanguage of this AddOrderRequest.  # noqa: E501

        For IDN domain registrations, the language codes for the domains  # noqa: E501

        :return: The idnlanguage of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._idnlanguage

    @idnlanguage.setter
    def idnlanguage(self, idnlanguage):
        """Sets the idnlanguage of this AddOrderRequest.

        For IDN domain registrations, the language codes for the domains  # noqa: E501

        :param idnlanguage: The idnlanguage of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._idnlanguage = idnlanguage

    @property
    def eppcode(self):
        """Gets the eppcode of this AddOrderRequest.  # noqa: E501

        For domain transfers, the EPP codes for the domains being transferred  # noqa: E501

        :return: The eppcode of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._eppcode

    @eppcode.setter
    def eppcode(self, eppcode):
        """Sets the eppcode of this AddOrderRequest.

        For domain transfers, the EPP codes for the domains being transferred  # noqa: E501

        :param eppcode: The eppcode of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._eppcode = eppcode

    @property
    def nameserver1(self):
        """Gets the nameserver1 of this AddOrderRequest.  # noqa: E501

        The first nameserver to apply to all domains in the order  # noqa: E501

        :return: The nameserver1 of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._nameserver1

    @nameserver1.setter
    def nameserver1(self, nameserver1):
        """Sets the nameserver1 of this AddOrderRequest.

        The first nameserver to apply to all domains in the order  # noqa: E501

        :param nameserver1: The nameserver1 of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._nameserver1 = nameserver1

    @property
    def nameserver2(self):
        """Gets the nameserver2 of this AddOrderRequest.  # noqa: E501

        The second nameserver to apply to all domains in the order  # noqa: E501

        :return: The nameserver2 of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._nameserver2

    @nameserver2.setter
    def nameserver2(self, nameserver2):
        """Sets the nameserver2 of this AddOrderRequest.

        The second nameserver to apply to all domains in the order  # noqa: E501

        :param nameserver2: The nameserver2 of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._nameserver2 = nameserver2

    @property
    def nameserver3(self):
        """Gets the nameserver3 of this AddOrderRequest.  # noqa: E501

        The third nameserver to apply to all domains in the order  # noqa: E501

        :return: The nameserver3 of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._nameserver3

    @nameserver3.setter
    def nameserver3(self, nameserver3):
        """Sets the nameserver3 of this AddOrderRequest.

        The third nameserver to apply to all domains in the order  # noqa: E501

        :param nameserver3: The nameserver3 of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._nameserver3 = nameserver3

    @property
    def nameserver4(self):
        """Gets the nameserver4 of this AddOrderRequest.  # noqa: E501

        The fourth nameserver to apply to all domains in the order  # noqa: E501

        :return: The nameserver4 of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._nameserver4

    @nameserver4.setter
    def nameserver4(self, nameserver4):
        """Sets the nameserver4 of this AddOrderRequest.

        The fourth nameserver to apply to all domains in the order  # noqa: E501

        :param nameserver4: The nameserver4 of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._nameserver4 = nameserver4

    @property
    def nameserver5(self):
        """Gets the nameserver5 of this AddOrderRequest.  # noqa: E501

        The fifth nameserver to apply to all domains in the order  # noqa: E501

        :return: The nameserver5 of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._nameserver5

    @nameserver5.setter
    def nameserver5(self, nameserver5):
        """Sets the nameserver5 of this AddOrderRequest.

        The fifth nameserver to apply to all domains in the order  # noqa: E501

        :param nameserver5: The nameserver5 of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._nameserver5 = nameserver5

    @property
    def configoptions(self):
        """Gets the configoptions of this AddOrderRequest.  # noqa: E501

        Array of base64 encoded serialized array of product configurable options values  # noqa: E501

        :return: The configoptions of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._configoptions

    @configoptions.setter
    def configoptions(self, configoptions):
        """Sets the configoptions of this AddOrderRequest.

        Array of base64 encoded serialized array of product configurable options values  # noqa: E501

        :param configoptions: The configoptions of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._configoptions = configoptions

    @property
    def priceoverride(self):
        """Gets the priceoverride of this AddOrderRequest.  # noqa: E501

        Override the price of the product being ordered  # noqa: E501

        :return: The priceoverride of this AddOrderRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._priceoverride

    @priceoverride.setter
    def priceoverride(self, priceoverride):
        """Sets the priceoverride of this AddOrderRequest.

        Override the price of the product being ordered  # noqa: E501

        :param priceoverride: The priceoverride of this AddOrderRequest.  # noqa: E501
        :type: list[float]
        """

        self._priceoverride = priceoverride

    @property
    def promocode(self):
        """Gets the promocode of this AddOrderRequest.  # noqa: E501

        The promotion code to apply to the order  # noqa: E501

        :return: The promocode of this AddOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._promocode

    @promocode.setter
    def promocode(self, promocode):
        """Sets the promocode of this AddOrderRequest.

        The promotion code to apply to the order  # noqa: E501

        :param promocode: The promocode of this AddOrderRequest.  # noqa: E501
        :type: str
        """

        self._promocode = promocode

    @property
    def promooverride(self):
        """Gets the promooverride of this AddOrderRequest.  # noqa: E501

        Should the promotion apply to the order even without matching promotional products  # noqa: E501

        :return: The promooverride of this AddOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._promooverride

    @promooverride.setter
    def promooverride(self, promooverride):
        """Sets the promooverride of this AddOrderRequest.

        Should the promotion apply to the order even without matching promotional products  # noqa: E501

        :param promooverride: The promooverride of this AddOrderRequest.  # noqa: E501
        :type: bool
        """

        self._promooverride = promooverride

    @property
    def affid(self):
        """Gets the affid of this AddOrderRequest.  # noqa: E501

        The affiliate ID to associate with the order  # noqa: E501

        :return: The affid of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._affid

    @affid.setter
    def affid(self, affid):
        """Sets the affid of this AddOrderRequest.

        The affiliate ID to associate with the order  # noqa: E501

        :param affid: The affid of this AddOrderRequest.  # noqa: E501
        :type: int
        """

        self._affid = affid

    @property
    def noinvoice(self):
        """Gets the noinvoice of this AddOrderRequest.  # noqa: E501

        Set to true to suppress the invoice generating for the whole order  # noqa: E501

        :return: The noinvoice of this AddOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._noinvoice

    @noinvoice.setter
    def noinvoice(self, noinvoice):
        """Sets the noinvoice of this AddOrderRequest.

        Set to true to suppress the invoice generating for the whole order  # noqa: E501

        :param noinvoice: The noinvoice of this AddOrderRequest.  # noqa: E501
        :type: bool
        """

        self._noinvoice = noinvoice

    @property
    def noinvoiceemail(self):
        """Gets the noinvoiceemail of this AddOrderRequest.  # noqa: E501

        Set to true to suppress the Invoice Created email being sent for the order  # noqa: E501

        :return: The noinvoiceemail of this AddOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._noinvoiceemail

    @noinvoiceemail.setter
    def noinvoiceemail(self, noinvoiceemail):
        """Sets the noinvoiceemail of this AddOrderRequest.

        Set to true to suppress the Invoice Created email being sent for the order  # noqa: E501

        :param noinvoiceemail: The noinvoiceemail of this AddOrderRequest.  # noqa: E501
        :type: bool
        """

        self._noinvoiceemail = noinvoiceemail

    @property
    def addons(self):
        """Gets the addons of this AddOrderRequest.  # noqa: E501

        Array of comma separated lists of addons to create on order with the products  # noqa: E501

        :return: The addons of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this AddOrderRequest.

        Array of comma separated lists of addons to create on order with the products  # noqa: E501

        :param addons: The addons of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._addons = addons

    @property
    def addonsqty(self):
        """Gets the addonsqty of this AddOrderRequest.  # noqa: E501

        Array of comma-separated lists of quantities for addons associated with products  # noqa: E501

        :return: The addonsqty of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._addonsqty

    @addonsqty.setter
    def addonsqty(self, addonsqty):
        """Sets the addonsqty of this AddOrderRequest.

        Array of comma-separated lists of quantities for addons associated with products  # noqa: E501

        :param addonsqty: The addonsqty of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._addonsqty = addonsqty

    @property
    def hostname(self):
        """Gets the hostname of this AddOrderRequest.  # noqa: E501

        Array of hostnames for VPS/Dedicated Server orders  # noqa: E501

        :return: The hostname of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AddOrderRequest.

        Array of hostnames for VPS/Dedicated Server orders  # noqa: E501

        :param hostname: The hostname of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._hostname = hostname

    @property
    def ns1prefix(self):
        """Gets the ns1prefix of this AddOrderRequest.  # noqa: E501

        Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)  # noqa: E501

        :return: The ns1prefix of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ns1prefix

    @ns1prefix.setter
    def ns1prefix(self, ns1prefix):
        """Sets the ns1prefix of this AddOrderRequest.

        Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)  # noqa: E501

        :param ns1prefix: The ns1prefix of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._ns1prefix = ns1prefix

    @property
    def ns2prefix(self):
        """Gets the ns2prefix of this AddOrderRequest.  # noqa: E501

        Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)  # noqa: E501

        :return: The ns2prefix of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ns2prefix

    @ns2prefix.setter
    def ns2prefix(self, ns2prefix):
        """Sets the ns2prefix of this AddOrderRequest.

        Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)  # noqa: E501

        :param ns2prefix: The ns2prefix of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._ns2prefix = ns2prefix

    @property
    def rootpw(self):
        """Gets the rootpw of this AddOrderRequest.  # noqa: E501

        Array of desired root passwords for VPS/Dedicated servers  # noqa: E501

        :return: The rootpw of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._rootpw

    @rootpw.setter
    def rootpw(self, rootpw):
        """Sets the rootpw of this AddOrderRequest.

        Array of desired root passwords for VPS/Dedicated servers  # noqa: E501

        :param rootpw: The rootpw of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._rootpw = rootpw

    @property
    def contactid(self):
        """Gets the contactid of this AddOrderRequest.  # noqa: E501

        The ID of the contact, associated with the client, that should apply to all domains in the order  # noqa: E501

        :return: The contactid of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._contactid

    @contactid.setter
    def contactid(self, contactid):
        """Sets the contactid of this AddOrderRequest.

        The ID of the contact, associated with the client, that should apply to all domains in the order  # noqa: E501

        :param contactid: The contactid of this AddOrderRequest.  # noqa: E501
        :type: int
        """

        self._contactid = contactid

    @property
    def dnsmanagement(self):
        """Gets the dnsmanagement of this AddOrderRequest.  # noqa: E501

        Add DNS Management to the Domain Order  # noqa: E501

        :return: The dnsmanagement of this AddOrderRequest.  # noqa: E501
        :rtype: list[bool]
        """
        return self._dnsmanagement

    @dnsmanagement.setter
    def dnsmanagement(self, dnsmanagement):
        """Sets the dnsmanagement of this AddOrderRequest.

        Add DNS Management to the Domain Order  # noqa: E501

        :param dnsmanagement: The dnsmanagement of this AddOrderRequest.  # noqa: E501
        :type: list[bool]
        """

        self._dnsmanagement = dnsmanagement

    @property
    def domainfields(self):
        """Gets the domainfields of this AddOrderRequest.  # noqa: E501

        Array of base64 encoded serialized array of TLD Specific Field Values  # noqa: E501

        :return: The domainfields of this AddOrderRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._domainfields

    @domainfields.setter
    def domainfields(self, domainfields):
        """Sets the domainfields of this AddOrderRequest.

        Array of base64 encoded serialized array of TLD Specific Field Values  # noqa: E501

        :param domainfields: The domainfields of this AddOrderRequest.  # noqa: E501
        :type: list[str]
        """

        self._domainfields = domainfields

    @property
    def emailforwarding(self):
        """Gets the emailforwarding of this AddOrderRequest.  # noqa: E501

        Add Email Forwarding to the Domain Order  # noqa: E501

        :return: The emailforwarding of this AddOrderRequest.  # noqa: E501
        :rtype: list[bool]
        """
        return self._emailforwarding

    @emailforwarding.setter
    def emailforwarding(self, emailforwarding):
        """Sets the emailforwarding of this AddOrderRequest.

        Add Email Forwarding to the Domain Order  # noqa: E501

        :param emailforwarding: The emailforwarding of this AddOrderRequest.  # noqa: E501
        :type: list[bool]
        """

        self._emailforwarding = emailforwarding

    @property
    def idprotection(self):
        """Gets the idprotection of this AddOrderRequest.  # noqa: E501

        Add ID Protection to the Domain Order  # noqa: E501

        :return: The idprotection of this AddOrderRequest.  # noqa: E501
        :rtype: list[bool]
        """
        return self._idprotection

    @idprotection.setter
    def idprotection(self, idprotection):
        """Sets the idprotection of this AddOrderRequest.

        Add ID Protection to the Domain Order  # noqa: E501

        :param idprotection: The idprotection of this AddOrderRequest.  # noqa: E501
        :type: list[bool]
        """

        self._idprotection = idprotection

    @property
    def domainpriceoverride(self):
        """Gets the domainpriceoverride of this AddOrderRequest.  # noqa: E501

        Override the price of the registration price on the domain being ordered  # noqa: E501

        :return: The domainpriceoverride of this AddOrderRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._domainpriceoverride

    @domainpriceoverride.setter
    def domainpriceoverride(self, domainpriceoverride):
        """Sets the domainpriceoverride of this AddOrderRequest.

        Override the price of the registration price on the domain being ordered  # noqa: E501

        :param domainpriceoverride: The domainpriceoverride of this AddOrderRequest.  # noqa: E501
        :type: list[float]
        """

        self._domainpriceoverride = domainpriceoverride

    @property
    def domainrenewoverride(self):
        """Gets the domainrenewoverride of this AddOrderRequest.  # noqa: E501

        Override the price of the renewal price on the domain being ordered  # noqa: E501

        :return: The domainrenewoverride of this AddOrderRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._domainrenewoverride

    @domainrenewoverride.setter
    def domainrenewoverride(self, domainrenewoverride):
        """Sets the domainrenewoverride of this AddOrderRequest.

        Override the price of the renewal price on the domain being ordered  # noqa: E501

        :param domainrenewoverride: The domainrenewoverride of this AddOrderRequest.  # noqa: E501
        :type: list[float]
        """

        self._domainrenewoverride = domainrenewoverride

    @property
    def domainrenewals(self):
        """Gets the domainrenewals of this AddOrderRequest.  # noqa: E501

        A name -> value object of domainName -> renewalPeriod renewals to add an order for  # noqa: E501

        :return: The domainrenewals of this AddOrderRequest.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._domainrenewals

    @domainrenewals.setter
    def domainrenewals(self, domainrenewals):
        """Sets the domainrenewals of this AddOrderRequest.

        A name -> value object of domainName -> renewalPeriod renewals to add an order for  # noqa: E501

        :param domainrenewals: The domainrenewals of this AddOrderRequest.  # noqa: E501
        :type: dict(str, int)
        """

        self._domainrenewals = domainrenewals

    @property
    def addonid(self):
        """Gets the addonid of this AddOrderRequest.  # noqa: E501

        The Addon ID for an Addon Only Order  # noqa: E501

        :return: The addonid of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._addonid

    @addonid.setter
    def addonid(self, addonid):
        """Sets the addonid of this AddOrderRequest.

        The Addon ID for an Addon Only Order  # noqa: E501

        :param addonid: The addonid of this AddOrderRequest.  # noqa: E501
        :type: int
        """

        self._addonid = addonid

    @property
    def addonidqty(self):
        """Gets the addonidqty of this AddOrderRequest.  # noqa: E501

        The quantity of addons in an addon-only order  # noqa: E501

        :return: The addonidqty of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._addonidqty

    @addonidqty.setter
    def addonidqty(self, addonidqty):
        """Sets the addonidqty of this AddOrderRequest.

        The quantity of addons in an addon-only order  # noqa: E501

        :param addonidqty: The addonidqty of this AddOrderRequest.  # noqa: E501
        :type: int
        """

        self._addonidqty = addonidqty

    @property
    def serviceid(self):
        """Gets the serviceid of this AddOrderRequest.  # noqa: E501

        The service ID for the addon only order  # noqa: E501

        :return: The serviceid of this AddOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._serviceid

    @serviceid.setter
    def serviceid(self, serviceid):
        """Sets the serviceid of this AddOrderRequest.

        The service ID for the addon only order  # noqa: E501

        :param serviceid: The serviceid of this AddOrderRequest.  # noqa: E501
        :type: int
        """

        self._serviceid = serviceid

    @property
    def addonids(self):
        """Gets the addonids of this AddOrderRequest.  # noqa: E501

        Array of addon IDs for an Addon Only Order  # noqa: E501

        :return: The addonids of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._addonids

    @addonids.setter
    def addonids(self, addonids):
        """Sets the addonids of this AddOrderRequest.

        Array of addon IDs for an Addon Only Order  # noqa: E501

        :param addonids: The addonids of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._addonids = addonids

    @property
    def addonidsqty(self):
        """Gets the addonidsqty of this AddOrderRequest.  # noqa: E501

        Array of quantities for an addon-only order  # noqa: E501

        :return: The addonidsqty of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._addonidsqty

    @addonidsqty.setter
    def addonidsqty(self, addonidsqty):
        """Sets the addonidsqty of this AddOrderRequest.

        Array of quantities for an addon-only order  # noqa: E501

        :param addonidsqty: The addonidsqty of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._addonidsqty = addonidsqty

    @property
    def serviceids(self):
        """Gets the serviceids of this AddOrderRequest.  # noqa: E501

        Array of service IDs to associate the addons for an Addon Only order  # noqa: E501

        :return: The serviceids of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._serviceids

    @serviceids.setter
    def serviceids(self, serviceids):
        """Sets the serviceids of this AddOrderRequest.

        Array of service IDs to associate the addons for an Addon Only order  # noqa: E501

        :param serviceids: The serviceids of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._serviceids = serviceids

    @property
    def servicerenewals(self):
        """Gets the servicerenewals of this AddOrderRequest.  # noqa: E501

        Array of service IDs to be on-demand renewed  # noqa: E501

        :return: The servicerenewals of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._servicerenewals

    @servicerenewals.setter
    def servicerenewals(self, servicerenewals):
        """Sets the servicerenewals of this AddOrderRequest.

        Array of service IDs to be on-demand renewed  # noqa: E501

        :param servicerenewals: The servicerenewals of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._servicerenewals = servicerenewals

    @property
    def addonrenewals(self):
        """Gets the addonrenewals of this AddOrderRequest.  # noqa: E501

        Array of service addon IDs to be on-demand renewed  # noqa: E501

        :return: The addonrenewals of this AddOrderRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._addonrenewals

    @addonrenewals.setter
    def addonrenewals(self, addonrenewals):
        """Sets the addonrenewals of this AddOrderRequest.

        Array of service addon IDs to be on-demand renewed  # noqa: E501

        :param addonrenewals: The addonrenewals of this AddOrderRequest.  # noqa: E501
        :type: list[int]
        """

        self._addonrenewals = addonrenewals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
