# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This client supports various WHMCS operations for managing clients, orders, and other resources.  Authentication is handled through username/password or API credentials. All requests are sent as form-encoded data to the /api.php endpoint. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AddOrderRequest(BaseModel):
    """
    AddOrderRequest
    """ # noqa: E501
    username: StrictStr = Field(description="Admin username/API identifier")
    password: StrictStr = Field(description="Admin password/API secret")
    accesskey: Optional[StrictStr] = Field(default=None, description="Optional API access key")
    responsetype: Optional[StrictStr] = Field(default='json', description="Response format")
    action: StrictStr = Field(description="Must be 'AddOrder'")
    clientid: StrictInt = Field(description="The ID of the client to add the order for")
    paymentmethod: StrictStr = Field(description="The payment method for the order in the system format (e.g., paypal, mailin)")
    pid: Optional[List[StrictInt]] = Field(default=None, description="Array of product IDs to add to the order")
    qty: Optional[List[StrictInt]] = Field(default=None, description="Array of product quantities")
    domain: Optional[List[StrictStr]] = Field(default=None, description="Array of domain names associated with the products/domains")
    billingcycle: Optional[List[StrictStr]] = Field(default=None, description="Array of billing cycles for the products")
    domaintype: Optional[List[StrictStr]] = Field(default=None, description="For domain registrations, array of register or transfer values")
    regperiod: Optional[List[Annotated[int, Field(le=10, strict=True, ge=1)]]] = Field(default=None, description="For domain registrations, the registration periods for the domains")
    idnlanguage: Optional[List[StrictStr]] = Field(default=None, description="For IDN domain registrations, the language codes for the domains")
    eppcode: Optional[List[StrictStr]] = Field(default=None, description="For domain transfers, the EPP codes for the domains being transferred")
    nameserver1: Optional[StrictStr] = Field(default=None, description="The first nameserver to apply to all domains in the order")
    nameserver2: Optional[StrictStr] = Field(default=None, description="The second nameserver to apply to all domains in the order")
    nameserver3: Optional[StrictStr] = Field(default=None, description="The third nameserver to apply to all domains in the order")
    nameserver4: Optional[StrictStr] = Field(default=None, description="The fourth nameserver to apply to all domains in the order")
    nameserver5: Optional[StrictStr] = Field(default=None, description="The fifth nameserver to apply to all domains in the order")
    customfields: Optional[List[StrictStr]] = Field(default=None, description="Array of base64 encoded serialized array of product custom field values")
    configoptions: Optional[List[StrictStr]] = Field(default=None, description="Array of base64 encoded serialized array of product configurable options values")
    priceoverride: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Override the price of the product being ordered")
    promocode: Optional[StrictStr] = Field(default=None, description="The promotion code to apply to the order")
    promooverride: Optional[StrictBool] = Field(default=None, description="Should the promotion apply to the order even without matching promotional products")
    affid: Optional[StrictInt] = Field(default=None, description="The affiliate ID to associate with the order")
    noinvoice: Optional[StrictBool] = Field(default=None, description="Set to true to suppress the invoice generating for the whole order")
    noinvoiceemail: Optional[StrictBool] = Field(default=None, description="Set to true to suppress the Invoice Created email being sent for the order")
    noemail: Optional[StrictBool] = Field(default=None, description="Set to true to suppress the Order Confirmation email being sent")
    addons: Optional[List[StrictStr]] = Field(default=None, description="Array of comma separated lists of addons to create on order with the products")
    addonsqty: Optional[List[StrictStr]] = Field(default=None, description="Array of comma-separated lists of quantities for addons associated with products")
    hostname: Optional[List[StrictStr]] = Field(default=None, description="Array of hostnames for VPS/Dedicated Server orders")
    ns1prefix: Optional[List[StrictStr]] = Field(default=None, description="Array of first nameserver prefixes for VPS/Dedicated servers (e.g., ns1 in ns1.hostname.com)")
    ns2prefix: Optional[List[StrictStr]] = Field(default=None, description="Array of second nameserver prefixes for VPS/Dedicated servers (e.g., ns2 in ns2.hostname.com)")
    rootpw: Optional[List[StrictStr]] = Field(default=None, description="Array of desired root passwords for VPS/Dedicated servers")
    contactid: Optional[StrictInt] = Field(default=None, description="The ID of the contact, associated with the client, that should apply to all domains in the order")
    dnsmanagement: Optional[List[StrictBool]] = Field(default=None, description="Add DNS Management to the Domain Order")
    domainfields: Optional[List[StrictStr]] = Field(default=None, description="Array of base64 encoded serialized array of TLD Specific Field Values")
    emailforwarding: Optional[List[StrictBool]] = Field(default=None, description="Add Email Forwarding to the Domain Order")
    idprotection: Optional[List[StrictBool]] = Field(default=None, description="Add ID Protection to the Domain Order")
    domainpriceoverride: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Override the price of the registration price on the domain being ordered")
    domainrenewoverride: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Override the price of the renewal price on the domain being ordered")
    domainrenewals: Optional[Dict[str, StrictInt]] = Field(default=None, description="A name -> value object of domainName -> renewalPeriod renewals to add an order for")
    clientip: Optional[StrictStr] = Field(default=None, description="The IP address to associate with the order")
    addonid: Optional[StrictInt] = Field(default=None, description="The Addon ID for an Addon Only Order")
    addonidqty: Optional[StrictInt] = Field(default=None, description="The quantity of addons in an addon-only order")
    serviceid: Optional[StrictInt] = Field(default=None, description="The service ID for the addon only order")
    addonids: Optional[List[StrictInt]] = Field(default=None, description="Array of addon IDs for an Addon Only Order")
    addonidsqty: Optional[List[StrictInt]] = Field(default=None, description="Array of quantities for an addon-only order")
    serviceids: Optional[List[StrictInt]] = Field(default=None, description="Array of service IDs to associate the addons for an Addon Only order")
    servicerenewals: Optional[List[StrictInt]] = Field(default=None, description="Array of service IDs to be on-demand renewed")
    addonrenewals: Optional[List[StrictInt]] = Field(default=None, description="Array of service addon IDs to be on-demand renewed")
    __properties: ClassVar[List[str]] = ["username", "password", "accesskey", "responsetype", "action", "clientid", "paymentmethod", "pid", "qty", "domain", "billingcycle", "domaintype", "regperiod", "idnlanguage", "eppcode", "nameserver1", "nameserver2", "nameserver3", "nameserver4", "nameserver5", "customfields", "configoptions", "priceoverride", "promocode", "promooverride", "affid", "noinvoice", "noinvoiceemail", "noemail", "addons", "addonsqty", "hostname", "ns1prefix", "ns2prefix", "rootpw", "contactid", "dnsmanagement", "domainfields", "emailforwarding", "idprotection", "domainpriceoverride", "domainrenewoverride", "domainrenewals", "clientip", "addonid", "addonidqty", "serviceid", "addonids", "addonidsqty", "serviceids", "servicerenewals", "addonrenewals"]

    @field_validator('responsetype')
    def responsetype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['json', 'xml']):
            raise ValueError("must be one of enum values ('json', 'xml')")
        return value

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AddOrder']):
            raise ValueError("must be one of enum values ('AddOrder')")
        return value

    @field_validator('billingcycle')
    def billingcycle_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['monthly', 'quarterly', 'semiannually', 'annually', 'biennially', 'triennially']):
                raise ValueError("each list item must be one of ('monthly', 'quarterly', 'semiannually', 'annually', 'biennially', 'triennially')")
        return value

    @field_validator('domaintype')
    def domaintype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['register', 'transfer']):
                raise ValueError("each list item must be one of ('register', 'transfer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "password": obj.get("password"),
            "accesskey": obj.get("accesskey"),
            "responsetype": obj.get("responsetype") if obj.get("responsetype") is not None else 'json',
            "action": obj.get("action"),
            "clientid": obj.get("clientid"),
            "paymentmethod": obj.get("paymentmethod"),
            "pid": obj.get("pid"),
            "qty": obj.get("qty"),
            "domain": obj.get("domain"),
            "billingcycle": obj.get("billingcycle"),
            "domaintype": obj.get("domaintype"),
            "regperiod": obj.get("regperiod"),
            "idnlanguage": obj.get("idnlanguage"),
            "eppcode": obj.get("eppcode"),
            "nameserver1": obj.get("nameserver1"),
            "nameserver2": obj.get("nameserver2"),
            "nameserver3": obj.get("nameserver3"),
            "nameserver4": obj.get("nameserver4"),
            "nameserver5": obj.get("nameserver5"),
            "customfields": obj.get("customfields"),
            "configoptions": obj.get("configoptions"),
            "priceoverride": obj.get("priceoverride"),
            "promocode": obj.get("promocode"),
            "promooverride": obj.get("promooverride"),
            "affid": obj.get("affid"),
            "noinvoice": obj.get("noinvoice"),
            "noinvoiceemail": obj.get("noinvoiceemail"),
            "noemail": obj.get("noemail"),
            "addons": obj.get("addons"),
            "addonsqty": obj.get("addonsqty"),
            "hostname": obj.get("hostname"),
            "ns1prefix": obj.get("ns1prefix"),
            "ns2prefix": obj.get("ns2prefix"),
            "rootpw": obj.get("rootpw"),
            "contactid": obj.get("contactid"),
            "dnsmanagement": obj.get("dnsmanagement"),
            "domainfields": obj.get("domainfields"),
            "emailforwarding": obj.get("emailforwarding"),
            "idprotection": obj.get("idprotection"),
            "domainpriceoverride": obj.get("domainpriceoverride"),
            "domainrenewoverride": obj.get("domainrenewoverride"),
            "domainrenewals": obj.get("domainrenewals"),
            "clientip": obj.get("clientip"),
            "addonid": obj.get("addonid"),
            "addonidqty": obj.get("addonidqty"),
            "serviceid": obj.get("serviceid"),
            "addonids": obj.get("addonids"),
            "addonidsqty": obj.get("addonidsqty"),
            "serviceids": obj.get("serviceids"),
            "servicerenewals": obj.get("servicerenewals"),
            "addonrenewals": obj.get("addonrenewals")
        })
        return _obj


