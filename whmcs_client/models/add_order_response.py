# coding: utf-8

"""
    WHMCS API

    Python client for the WHMCS API.  WHMCS (Web Host Manager Complete Solution) provides a single API endpoint that handles multiple operations through different 'action' parameters. This specification presents each action as an independent path while routing all requests to the /api.php endpoint.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from whmcs_client.models.whmcs_success_response import WHMCSSuccessResponse  # noqa: F401,E501

class AddOrderResponse(WHMCSSuccessResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orderid': 'int',
        'productids': 'list[int]',
        'addonids': 'list[int]',
        'domainids': 'list[int]',
        'invoiceid': 'int'
    }
    if hasattr(WHMCSSuccessResponse, "swagger_types"):
        swagger_types.update(WHMCSSuccessResponse.swagger_types)

    attribute_map = {
        'orderid': 'orderid',
        'productids': 'productids',
        'addonids': 'addonids',
        'domainids': 'domainids',
        'invoiceid': 'invoiceid'
    }
    if hasattr(WHMCSSuccessResponse, "attribute_map"):
        attribute_map.update(WHMCSSuccessResponse.attribute_map)

    def __init__(self, orderid=None, productids=None, addonids=None, domainids=None, invoiceid=None, *args, **kwargs):  # noqa: E501
        """AddOrderResponse - a model defined in Swagger"""  # noqa: E501
        self._orderid = None
        self._productids = None
        self._addonids = None
        self._domainids = None
        self._invoiceid = None
        self.discriminator = None
        if orderid is not None:
            self.orderid = orderid
        if productids is not None:
            self.productids = productids
        if addonids is not None:
            self.addonids = addonids
        if domainids is not None:
            self.domainids = domainids
        if invoiceid is not None:
            self.invoiceid = invoiceid
        WHMCSSuccessResponse.__init__(self, *args, **kwargs)

    @property
    def orderid(self):
        """Gets the orderid of this AddOrderResponse.  # noqa: E501

        The ID of the newly created order  # noqa: E501

        :return: The orderid of this AddOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._orderid

    @orderid.setter
    def orderid(self, orderid):
        """Sets the orderid of this AddOrderResponse.

        The ID of the newly created order  # noqa: E501

        :param orderid: The orderid of this AddOrderResponse.  # noqa: E501
        :type: int
        """

        self._orderid = orderid

    @property
    def productids(self):
        """Gets the productids of this AddOrderResponse.  # noqa: E501

        Array of product IDs that were created  # noqa: E501

        :return: The productids of this AddOrderResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._productids

    @productids.setter
    def productids(self, productids):
        """Sets the productids of this AddOrderResponse.

        Array of product IDs that were created  # noqa: E501

        :param productids: The productids of this AddOrderResponse.  # noqa: E501
        :type: list[int]
        """

        self._productids = productids

    @property
    def addonids(self):
        """Gets the addonids of this AddOrderResponse.  # noqa: E501

        Array of addon IDs that were created  # noqa: E501

        :return: The addonids of this AddOrderResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._addonids

    @addonids.setter
    def addonids(self, addonids):
        """Sets the addonids of this AddOrderResponse.

        Array of addon IDs that were created  # noqa: E501

        :param addonids: The addonids of this AddOrderResponse.  # noqa: E501
        :type: list[int]
        """

        self._addonids = addonids

    @property
    def domainids(self):
        """Gets the domainids of this AddOrderResponse.  # noqa: E501

        Array of domain IDs that were created  # noqa: E501

        :return: The domainids of this AddOrderResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._domainids

    @domainids.setter
    def domainids(self, domainids):
        """Sets the domainids of this AddOrderResponse.

        Array of domain IDs that were created  # noqa: E501

        :param domainids: The domainids of this AddOrderResponse.  # noqa: E501
        :type: list[int]
        """

        self._domainids = domainids

    @property
    def invoiceid(self):
        """Gets the invoiceid of this AddOrderResponse.  # noqa: E501

        The invoice ID if an invoice was generated  # noqa: E501

        :return: The invoiceid of this AddOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._invoiceid

    @invoiceid.setter
    def invoiceid(self, invoiceid):
        """Sets the invoiceid of this AddOrderResponse.

        The invoice ID if an invoice was generated  # noqa: E501

        :param invoiceid: The invoiceid of this AddOrderResponse.  # noqa: E501
        :type: int
        """

        self._invoiceid = invoiceid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
